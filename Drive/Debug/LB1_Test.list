
LB1_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001068  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  00020810  2**0
                  CONTENTS
  4 .ARM          00000008  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c8  080057c8  00020810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000810  20000000  080057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020810  2**0
                  CONTENTS
 10 .bss          00000314  20000810  20000810  00020810  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  00020810  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020810  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6a0  00000000  00000000  00020840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f5a  00000000  00000000  0002eee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00030e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c60  00000000  00000000  00031b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fe4  00000000  00000000  000327e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010322  00000000  00000000  000557cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1f82  00000000  00000000  00065aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00147a70  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037bc  00000000  00000000  00147ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000810 	.word	0x20000810
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004740 	.word	0x08004740

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000814 	.word	0x20000814
 80001e8:	08004740 	.word	0x08004740

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <Clear_matrix>:
{1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
{1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1}
};

//Функция очистки матрицы
void Clear_matrix(void){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; 4 > i; i++ ){
 80004ea:	2300      	movs	r3, #0
 80004ec:	71fb      	strb	r3, [r7, #7]
 80004ee:	e010      	b.n	8000512 <Clear_matrix+0x2e>
		for (uint8_t n = 0; 16 > n; n++ ){
 80004f0:	2300      	movs	r3, #0
 80004f2:	71bb      	strb	r3, [r7, #6]
 80004f4:	e007      	b.n	8000506 <Clear_matrix+0x22>
			Display_Write_1(0xFF, i);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4619      	mov	r1, r3
 80004fa:	20ff      	movs	r0, #255	; 0xff
 80004fc:	f000 f812 	bl	8000524 <Display_Write_1>
		for (uint8_t n = 0; 16 > n; n++ ){
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	3301      	adds	r3, #1
 8000504:	71bb      	strb	r3, [r7, #6]
 8000506:	79bb      	ldrb	r3, [r7, #6]
 8000508:	2b0f      	cmp	r3, #15
 800050a:	d9f4      	bls.n	80004f6 <Clear_matrix+0x12>
	for (uint8_t i = 0; 4 > i; i++ ){
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	3301      	adds	r3, #1
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9eb      	bls.n	80004f0 <Clear_matrix+0xc>
		}
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <Display_Write_1>:

//Алгоритм вывода информации
void Display_Write_1(uint8_t pData, uint8_t s) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	460a      	mov	r2, r1
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	4613      	mov	r3, r2
 8000532:	71bb      	strb	r3, [r7, #6]


	     switch(s+1){
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	3301      	adds	r3, #1
 8000538:	3b01      	subs	r3, #1
 800053a:	2b03      	cmp	r3, #3
 800053c:	d836      	bhi.n	80005ac <Display_Write_1+0x88>
 800053e:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <Display_Write_1+0x20>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	08000555 	.word	0x08000555
 8000548:	0800056b 	.word	0x0800056b
 800054c:	08000581 	.word	0x08000581
 8000550:	08000597 	.word	0x08000597
	     		 	 case 1:
	     			 	 HAL_GPIO_WritePin(GPIOD, A_Pin, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	2110      	movs	r1, #16
 8000558:	4823      	ldr	r0, [pc, #140]	; (80005e8 <Display_Write_1+0xc4>)
 800055a:	f002 fd8f 	bl	800307c <HAL_GPIO_WritePin>
	     			 	 HAL_GPIO_WritePin(GPIOD, B_Pin, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	2120      	movs	r1, #32
 8000562:	4821      	ldr	r0, [pc, #132]	; (80005e8 <Display_Write_1+0xc4>)
 8000564:	f002 fd8a 	bl	800307c <HAL_GPIO_WritePin>
	     			 	 break;
 8000568:	e020      	b.n	80005ac <Display_Write_1+0x88>
	     		 	 case 2:
	     		 		 HAL_GPIO_WritePin(GPIOD, A_Pin, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2110      	movs	r1, #16
 800056e:	481e      	ldr	r0, [pc, #120]	; (80005e8 <Display_Write_1+0xc4>)
 8000570:	f002 fd84 	bl	800307c <HAL_GPIO_WritePin>
	     		 		 HAL_GPIO_WritePin(GPIOD, B_Pin, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	2120      	movs	r1, #32
 8000578:	481b      	ldr	r0, [pc, #108]	; (80005e8 <Display_Write_1+0xc4>)
 800057a:	f002 fd7f 	bl	800307c <HAL_GPIO_WritePin>
	     		 		 break;
 800057e:	e015      	b.n	80005ac <Display_Write_1+0x88>
	     		 	case 3:
	     		 		 HAL_GPIO_WritePin(GPIOD, A_Pin, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	2110      	movs	r1, #16
 8000584:	4818      	ldr	r0, [pc, #96]	; (80005e8 <Display_Write_1+0xc4>)
 8000586:	f002 fd79 	bl	800307c <HAL_GPIO_WritePin>
	     		 		 HAL_GPIO_WritePin(GPIOD, B_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	4816      	ldr	r0, [pc, #88]	; (80005e8 <Display_Write_1+0xc4>)
 8000590:	f002 fd74 	bl	800307c <HAL_GPIO_WritePin>
	     		 		 break;
 8000594:	e00a      	b.n	80005ac <Display_Write_1+0x88>
	     		 	case 4:
	     		 		 HAL_GPIO_WritePin(GPIOD, A_Pin, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2110      	movs	r1, #16
 800059a:	4813      	ldr	r0, [pc, #76]	; (80005e8 <Display_Write_1+0xc4>)
 800059c:	f002 fd6e 	bl	800307c <HAL_GPIO_WritePin>
	     		 		 HAL_GPIO_WritePin(GPIOD, B_Pin, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <Display_Write_1+0xc4>)
 80005a6:	f002 fd69 	bl	800307c <HAL_GPIO_WritePin>
	     		 		 break;
 80005aa:	bf00      	nop
	     		 }

	     HAL_GPIO_WritePin(GPIOD, OE_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <Display_Write_1+0xc4>)
 80005b2:	f002 fd63 	bl	800307c <HAL_GPIO_WritePin>
	     HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	480b      	ldr	r0, [pc, #44]	; (80005e8 <Display_Write_1+0xc4>)
 80005bc:	f002 fd5e 	bl	800307c <HAL_GPIO_WritePin>
	     HAL_SPI_Transmit(&hspi5, (uint8_t*) &pData, 1, 10);
 80005c0:	1df9      	adds	r1, r7, #7
 80005c2:	230a      	movs	r3, #10
 80005c4:	2201      	movs	r2, #1
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <Display_Write_1+0xc8>)
 80005c8:	f003 fa5f 	bl	8003a8a <HAL_SPI_Transmit>
		 HAL_GPIO_WritePin(GPIOD, SCLK_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <Display_Write_1+0xc4>)
 80005d2:	f002 fd53 	bl	800307c <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOD, OE_Pin, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2140      	movs	r1, #64	; 0x40
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <Display_Write_1+0xc4>)
 80005dc:	f002 fd4e 	bl	800307c <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40020c00 	.word	0x40020c00
 80005ec:	20000838 	.word	0x20000838

080005f0 <Way_Run>:

//Алгоритм движения разметки по дороге
void Way_Run(int displ[16][32]) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	//Определяем текущий кадр, чтобы верно сдвинуть разметку
	switch(displ[7][15]+displ[8][15]){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80005fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000608:	4413      	add	r3, r2
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <Way_Run+0x24>
 800060e:	2b01      	cmp	r3, #1
 8000610:	d02e      	beq.n	8000670 <Way_Run+0x80>
				displ[15][15] = 0;
			}
			break;

	}
}
 8000612:	e08f      	b.n	8000734 <Way_Run+0x144>
			displ[7][15] = 1;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800061a:	2201      	movs	r2, #1
 800061c:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[8][15] = 0;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000624:	2200      	movs	r2, #0
 8000626:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[9][15] = 0;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800062e:	2200      	movs	r2, #0
 8000630:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[10][15] = 1;
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000638:	2201      	movs	r2, #1
 800063a:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[11][15] = 0;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8000642:	2200      	movs	r2, #0
 8000644:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[12][15] = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800064c:	2200      	movs	r2, #0
 800064e:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[13][15] = 0;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000656:	2200      	movs	r2, #0
 8000658:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[14][15] = 1;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000660:	2201      	movs	r2, #1
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
			displ[15][15] = 1;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800066a:	2201      	movs	r2, #1
 800066c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800066e:	e061      	b.n	8000734 <Way_Run+0x144>
			if (displ[7][15] == 1){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000678:	2b01      	cmp	r3, #1
 800067a:	d12d      	bne.n	80006d8 <Way_Run+0xe8>
				displ[7][15] = 0;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[8][15] = 1;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800068c:	2201      	movs	r2, #1
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[9][15] = 0;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8000696:	2200      	movs	r2, #0
 8000698:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[10][15] = 0;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80006a0:	2200      	movs	r2, #0
 80006a2:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[11][15] = 1;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80006aa:	2201      	movs	r2, #1
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[12][15] = 1;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80006b4:	2201      	movs	r2, #1
 80006b6:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[13][15] = 0;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80006be:	2200      	movs	r2, #0
 80006c0:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[14][15] = 0;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80006c8:	2200      	movs	r2, #0
 80006ca:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[15][15] = 0;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80006d2:	2200      	movs	r2, #0
 80006d4:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80006d6:	e02c      	b.n	8000732 <Way_Run+0x142>
				displ[7][15] = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f503 7360 	add.w	r3, r3, #896	; 0x380
 80006de:	2200      	movs	r2, #0
 80006e0:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[8][15] = 0;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[9][15] = 1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80006f2:	2201      	movs	r2, #1
 80006f4:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[10][15] = 0;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[11][15] = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8000706:	2200      	movs	r2, #0
 8000708:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[12][15] = 1;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000710:	2201      	movs	r2, #1
 8000712:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[13][15] = 1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800071a:	2201      	movs	r2, #1
 800071c:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[14][15] = 0;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
				displ[15][15] = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800072e:	2200      	movs	r2, #0
 8000730:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000732:	bf00      	nop
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <Callyzi_Car>:

//Положение машины с реостатом
int Callyzi_Car(void) {
 8000740:	b480      	push	{r7}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
	uint8_t live = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	75fb      	strb	r3, [r7, #23]
	//Проверяем, была ли машина до этого или это первая итерация
	if (old_car_x != 0) {
 800074a:	4b4e      	ldr	r3, [pc, #312]	; (8000884 <Callyzi_Car+0x144>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <Callyzi_Car+0x18>
		 flag = 1;
 8000752:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <Callyzi_Car+0x148>)
 8000754:	2201      	movs	r2, #1
 8000756:	801a      	strh	r2, [r3, #0]
	}
	//Затираем прошлое положение машины, если она была
	if (flag == 1) {
 8000758:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <Callyzi_Car+0x148>)
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d129      	bne.n	80007b4 <Callyzi_Car+0x74>
		for (int i = old_car_x-1; i < old_car_x + 2; i++) {
 8000760:	4b48      	ldr	r3, [pc, #288]	; (8000884 <Callyzi_Car+0x144>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	3b01      	subs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	e009      	b.n	800077e <Callyzi_Car+0x3e>
				displ[14][i] = 1;
 800076a:	4a48      	ldr	r2, [pc, #288]	; (800088c <Callyzi_Car+0x14c>)
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8000772:	2101      	movs	r1, #1
 8000774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = old_car_x-1; i < old_car_x + 2; i++) {
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	3301      	adds	r3, #1
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <Callyzi_Car+0x144>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	3301      	adds	r3, #1
 8000784:	693a      	ldr	r2, [r7, #16]
 8000786:	429a      	cmp	r2, r3
 8000788:	ddef      	ble.n	800076a <Callyzi_Car+0x2a>
		}
		for (int i = old_car_x-2; i < old_car_x + 3; i++) {
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <Callyzi_Car+0x144>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	3b02      	subs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e009      	b.n	80007a8 <Callyzi_Car+0x68>
					displ[15][i] = 1;
 8000794:	4a3d      	ldr	r2, [pc, #244]	; (800088c <Callyzi_Car+0x14c>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800079c:	2101      	movs	r1, #1
 800079e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = old_car_x-2; i < old_car_x + 3; i++) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <Callyzi_Car+0x144>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	3302      	adds	r3, #2
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	ddef      	ble.n	8000794 <Callyzi_Car+0x54>
		}
	}

	//Определяем новые координаты центра машины
	uint8_t x_car = 8+move; //предел - 23, то есть move - от 0 до 16
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <Callyzi_Car+0x150>)
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	3308      	adds	r3, #8
 80007bc:	70fb      	strb	r3, [r7, #3]
	old_car_x = x_car;
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <Callyzi_Car+0x144>)
 80007c4:	801a      	strh	r2, [r3, #0]
	//Определяем координаты всей машины для дальнейшем отрисовки и проверяем, все ли свободны (кроме столбца 15)
	for (int i = x_car-1; i < x_car + 2; i++) {
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	e020      	b.n	8000810 <Callyzi_Car+0xd0>
		if ((displ[14][i] == 0)&(i != 15)) {
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <Callyzi_Car+0x14c>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80007d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	bf0c      	ite	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	2300      	movne	r3, #0
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2b0f      	cmp	r3, #15
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4013      	ands	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <Callyzi_Car+0xbc>
			live = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	75fb      	strb	r3, [r7, #23]
		}
		displ[14][i] = 0;
 80007fc:	4a23      	ldr	r2, [pc, #140]	; (800088c <Callyzi_Car+0x14c>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8000804:	2100      	movs	r1, #0
 8000806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = x_car-1; i < x_car + 2; i++) {
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	3301      	adds	r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	3301      	adds	r3, #1
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	429a      	cmp	r2, r3
 8000818:	ddd9      	ble.n	80007ce <Callyzi_Car+0x8e>
	}
	for (int i = x_car-2; i < x_car + 3; i++) {
 800081a:	78fb      	ldrb	r3, [r7, #3]
 800081c:	3b02      	subs	r3, #2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	e020      	b.n	8000864 <Callyzi_Car+0x124>
			if ((displ[15][i] == 0)&(i != 15)) {
 8000822:	4a1a      	ldr	r2, [pc, #104]	; (800088c <Callyzi_Car+0x14c>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2da      	uxtb	r2, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b0f      	cmp	r3, #15
 800083c:	bf14      	ite	ne
 800083e:	2301      	movne	r3, #1
 8000840:	2300      	moveq	r3, #0
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4013      	ands	r3, r2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <Callyzi_Car+0x110>
					live = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
				}
			displ[15][i] = 0;
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <Callyzi_Car+0x14c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000858:	2100      	movs	r1, #0
 800085a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = x_car-2; i < x_car + 3; i++) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3301      	adds	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	3302      	adds	r3, #2
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	ddd9      	ble.n	8000822 <Callyzi_Car+0xe2>
	}
	flag = 0;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <Callyzi_Car+0x148>)
 8000870:	2200      	movs	r2, #0
 8000872:	801a      	strh	r2, [r3, #0]
	return (live);
 8000874:	7dfb      	ldrb	r3, [r7, #23]
}
 8000876:	4618      	mov	r0, r3
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000830 	.word	0x20000830
 8000888:	20000832 	.word	0x20000832
 800088c:	20000004 	.word	0x20000004
 8000890:	2000082c 	.word	0x2000082c

08000894 <Danger_spawn>:



//Алгоритм генеации  препятствий
void Danger_spawn(uint16_t b) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b098      	sub	sp, #96	; 0x60
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	uint16_t Danger[44] = {0,0,0,0,0,10,11,12,13,14,0,0,0,0,0,0,0,0,0,16,17,18,0,0,0,0,0,0,11,12,0,0,15,16,0,0,0,17,0,18,0,0,0,0}; //с 9 по 14 с 16 по 21.
 800089e:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <Danger_spawn+0x3c>)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4611      	mov	r1, r2
 80008a6:	2258      	movs	r2, #88	; 0x58
 80008a8:	4618      	mov	r0, r3
 80008aa:	f003 ff33 	bl	8004714 <memcpy>
	displ[7][Danger[b]] = 0;
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80008b6:	4413      	add	r3, r2
 80008b8:	f833 3c58 	ldrh.w	r3, [r3, #-88]
 80008bc:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <Danger_spawn+0x40>)
 80008be:	33e0      	adds	r3, #224	; 0xe0
 80008c0:	2100      	movs	r1, #0
 80008c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80008c6:	bf00      	nop
 80008c8:	3760      	adds	r7, #96	; 0x60
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	08004758 	.word	0x08004758
 80008d4:	20000004 	.word	0x20000004

080008d8 <Danger_offset>:

//Алгоритм сдвига препятсвий по экрану (тут же условие проигрышка)
int Danger_offset(void) {
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
	uint8_t live = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	71fb      	strb	r3, [r7, #7]
	//Проверка опасных зон, если будет смещение, то окажется ли что-то на координатах машины
	uint16_t x_car = 8+move;
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <Danger_offset+0x144>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	3308      	adds	r3, #8
 80008e8:	80bb      	strh	r3, [r7, #4]
	if (((displ[13][x_car] == 0) || (displ[13][x_car + 1] == 0)
 80008ea:	88bb      	ldrh	r3, [r7, #4]
 80008ec:	4a4c      	ldr	r2, [pc, #304]	; (8000a20 <Danger_offset+0x148>)
 80008ee:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80008f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			|| (displ[13][x_car - 1] == 0) || (displ[14][x_car - 2] == 0)
			|| (displ[14][x_car + 2] == 0))
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d023      	beq.n	8000942 <Danger_offset+0x6a>
	if (((displ[13][x_car] == 0) || (displ[13][x_car + 1] == 0)
 80008fa:	88bb      	ldrh	r3, [r7, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a48      	ldr	r2, [pc, #288]	; (8000a20 <Danger_offset+0x148>)
 8000900:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d01a      	beq.n	8000942 <Danger_offset+0x6a>
			|| (displ[13][x_car - 1] == 0) || (displ[14][x_car - 2] == 0)
 800090c:	88bb      	ldrh	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	4a43      	ldr	r2, [pc, #268]	; (8000a20 <Danger_offset+0x148>)
 8000912:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d011      	beq.n	8000942 <Danger_offset+0x6a>
 800091e:	88bb      	ldrh	r3, [r7, #4]
 8000920:	3b02      	subs	r3, #2
 8000922:	4a3f      	ldr	r2, [pc, #252]	; (8000a20 <Danger_offset+0x148>)
 8000924:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d008      	beq.n	8000942 <Danger_offset+0x6a>
			|| (displ[14][x_car + 2] == 0))
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	3302      	adds	r3, #2
 8000934:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <Danger_offset+0x148>)
 8000936:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800093a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d101      	bne.n	8000946 <Danger_offset+0x6e>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <Danger_offset+0x70>
 8000946:	2300      	movs	r3, #0
			& !(((x_car == 15) || (x_car + 1 == 15) || (x_car + 2 == 15)
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	b2da      	uxtb	r2, r3
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d00d      	beq.n	8000970 <Danger_offset+0x98>
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	2b0e      	cmp	r3, #14
 8000958:	d00a      	beq.n	8000970 <Danger_offset+0x98>
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	2b0d      	cmp	r3, #13
 800095e:	d007      	beq.n	8000970 <Danger_offset+0x98>
					|| (x_car - 1 == 15) || (x_car - 2 == 15)))) {
 8000960:	88bb      	ldrh	r3, [r7, #4]
 8000962:	2b10      	cmp	r3, #16
 8000964:	d004      	beq.n	8000970 <Danger_offset+0x98>
			& !(((x_car == 15) || (x_car + 1 == 15) || (x_car + 2 == 15)
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	2b11      	cmp	r3, #17
 800096a:	d001      	beq.n	8000970 <Danger_offset+0x98>
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <Danger_offset+0x9a>
 8000970:	2300      	movs	r3, #0
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4013      	ands	r3, r2
 800097a:	b2db      	uxtb	r3, r3
	if (((displ[13][x_car] == 0) || (displ[13][x_car + 1] == 0)
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <Danger_offset+0xb0>
		live = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	71fb      	strb	r3, [r7, #7]
		return (live);
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	e042      	b.n	8000a0e <Danger_offset+0x136>
	}
	//Алгоритм сдвига всех препядствий
	for (int i = 15; i >= 7; i--) {
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e03b      	b.n	8000a06 <Danger_offset+0x12e>
			for (int j = 9; j < 22; j++) {
 800098e:	2309      	movs	r3, #9
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	e032      	b.n	80009fa <Danger_offset+0x122>
				if ((displ[i][j] == 0)&(j != 15)) {
 8000994:	4922      	ldr	r1, [pc, #136]	; (8000a20 <Danger_offset+0x148>)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	015a      	lsls	r2, r3, #5
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	4413      	add	r3, r2
 800099e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	bf0c      	ite	eq
 80009a6:	2301      	moveq	r3, #1
 80009a8:	2300      	movne	r3, #0
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	bf14      	ite	ne
 80009b2:	2301      	movne	r3, #1
 80009b4:	2300      	moveq	r3, #0
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4013      	ands	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d019      	beq.n	80009f4 <Danger_offset+0x11c>
					displ[i][j] = 1;
 80009c0:	4917      	ldr	r1, [pc, #92]	; (8000a20 <Danger_offset+0x148>)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	015a      	lsls	r2, r3, #5
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	2201      	movs	r2, #1
 80009cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (i+1 < 16) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2b0e      	cmp	r3, #14
 80009d4:	dc0e      	bgt.n	80009f4 <Danger_offset+0x11c>
						displ[i+1][j] = 0;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3301      	adds	r3, #1
 80009da:	4911      	ldr	r1, [pc, #68]	; (8000a20 <Danger_offset+0x148>)
 80009dc:	015a      	lsls	r2, r3, #5
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						point++;
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <Danger_offset+0x14c>)
 80009ea:	881b      	ldrh	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <Danger_offset+0x14c>)
 80009f2:	801a      	strh	r2, [r3, #0]
			for (int j = 9; j < 22; j++) {
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2b15      	cmp	r3, #21
 80009fe:	ddc9      	ble.n	8000994 <Danger_offset+0xbc>
	for (int i = 15; i >= 7; i--) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	2b06      	cmp	r3, #6
 8000a0a:	dcc0      	bgt.n	800098e <Danger_offset+0xb6>
					}
				}
			}
	}
	return(live);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2000082c 	.word	0x2000082c
 8000a20:	20000004 	.word	0x20000004
 8000a24:	2000082e 	.word	0x2000082e

08000a28 <Show_matrix>:

//Отображение матрицы значений на дисплеии
void Show_matrix( int displ[16][32] ){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ca      	sub	sp, #296	; 0x128
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	6018      	str	r0, [r3, #0]
	//Очистка экрана
	Clear_matrix();
 8000a32:	f7ff fd57 	bl	80004e4 <Clear_matrix>
	//Матрица для байтов
	int bytesMatrix[16][4] = {
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a40:	461a      	mov	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f003 fe74 	bl	8004730 <memset>
			{0, 0, 0, 0}};



	//Алгоритм сборки байтовой матрицы
	for (int i = 0; i < 16; i++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000a4e:	e048      	b.n	8000ae2 <Show_matrix+0xba>
	        for (int j = 0; j < 4; j++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000a56:	e03b      	b.n	8000ad0 <Show_matrix+0xa8>
	            uint8_t byte = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	            for (int k = 0; k < 8; k++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000a64:	e01f      	b.n	8000aa6 <Show_matrix+0x7e>
	                // Собираем байт из битов, начиная с самого младшего
	            	byte |= (displ[i][j * 8 + k] << (7-k)); //лучший преобразователь
 8000a66:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a6a:	01db      	lsls	r3, r3, #7
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	6812      	ldr	r2, [r2, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000a76:	00d1      	lsls	r1, r2, #3
 8000a78:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000a7c:	440a      	add	r2, r1
 8000a7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	b25a      	sxtb	r2, r3
 8000a90:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	            for (int k = 0; k < 8; k++) {
 8000a9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000aa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	dddb      	ble.n	8000a66 <Show_matrix+0x3e>
	            }
	            bytesMatrix[i][j] = byte;
 8000aae:	f897 111f 	ldrb.w	r1, [r7, #287]	; 0x11f
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000aba:	0090      	lsls	r0, r2, #2
 8000abc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000ac0:	4402      	add	r2, r0
 8000ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	        for (int j = 0; j < 4; j++) {
 8000ac6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aca:	3301      	adds	r3, #1
 8000acc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000ad0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	ddbf      	ble.n	8000a58 <Show_matrix+0x30>
	for (int i = 0; i < 16; i++) {
 8000ad8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000adc:	3301      	adds	r3, #1
 8000ade:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000ae2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ae6:	2b0f      	cmp	r3, #15
 8000ae8:	ddb2      	ble.n	8000a50 <Show_matrix+0x28>
	        }
	}


	//Алгоритм выгрузки байтов на экран.
	for (uint8_t n = 0; 4 > n; n++ ) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000af0:	e037      	b.n	8000b62 <Show_matrix+0x13a>
		for (int x = 0; x < 4; x++){
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000af8:	e025      	b.n	8000b46 <Show_matrix+0x11e>
			for (int y = 15-n; y > -1; y = y-(4)){
 8000afa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000afe:	f1c3 030f 	rsb	r3, r3, #15
 8000b02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b06:	e015      	b.n	8000b34 <Show_matrix+0x10c>
		        	Display_Write_1(bytesMatrix[y][x],n);
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b10:	0091      	lsls	r1, r2, #2
 8000b12:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000b16:	440a      	add	r2, r1
 8000b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fcfd 	bl	8000524 <Display_Write_1>
			for (int y = 15-n; y > -1; y = y-(4)){
 8000b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dae5      	bge.n	8000b08 <Show_matrix+0xe0>
		for (int x = 0; x < 4; x++){
 8000b3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b40:	3301      	adds	r3, #1
 8000b42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000b46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	ddd5      	ble.n	8000afa <Show_matrix+0xd2>

		        }
		     }
	HAL_Delay(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f001 fba2 	bl	8002298 <HAL_Delay>
	Clear_matrix();
 8000b54:	f7ff fcc6 	bl	80004e4 <Clear_matrix>
	for (uint8_t n = 0; 4 > n; n++ ) {
 8000b58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000b62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d9c3      	bls.n	8000af2 <Show_matrix+0xca>
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
 8000b6e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <Game_Over>:

//Проверка на касание машиной препядствия
void Game_Over() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8000b7e:	af00      	add	r7, sp, #0
	for (int i = old_car_x-1; i < old_car_x + 2; i++) {
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <Game_Over+0xb4>)
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000b8a:	e00c      	b.n	8000ba6 <Game_Over+0x2e>
					displ[14][i] = 1;
 8000b8c:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <Game_Over+0xb8>)
 8000b8e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000b92:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8000b96:	2101      	movs	r1, #1
 8000b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = old_car_x-1; i < old_car_x + 2; i++) {
 8000b9c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <Game_Over+0xb4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	ddeb      	ble.n	8000b8c <Game_Over+0x14>
			}
			for (int i = old_car_x-2; i < old_car_x + 3; i++) {
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <Game_Over+0xb4>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	3b02      	subs	r3, #2
 8000bba:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8000bbe:	e00c      	b.n	8000bda <Game_Over+0x62>
						displ[15][i] = 1;
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <Game_Over+0xb8>)
 8000bc2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000bc6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8000bca:	2101      	movs	r1, #1
 8000bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = old_car_x-2; i < old_car_x + 3; i++) {
 8000bd0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <Game_Over+0xb4>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	3302      	adds	r3, #2
 8000be0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8000be4:	429a      	cmp	r2, r3
 8000be6:	ddeb      	ble.n	8000bc0 <Game_Over+0x48>
			}
	int displ_over[16][32] = {
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <Game_Over+0xbc>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	4611      	mov	r1, r2
 8000bf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f003 fd8d 	bl	8004714 <memcpy>
	{1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	{1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	{1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1},
	{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
	};
	uint16_t a = 1000;
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	f8a7 3806 	strh.w	r3, [r7, #2054]	; 0x806
	while (a > 2) {
 8000c02:	e008      	b.n	8000c16 <Game_Over+0x9e>
		Show_matrix(displ_over);
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff0e 	bl	8000a28 <Show_matrix>
		a--;
 8000c0c:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	; 0x806
 8000c10:	3b01      	subs	r3, #1
 8000c12:	f8a7 3806 	strh.w	r3, [r7, #2054]	; 0x806
	while (a > 2) {
 8000c16:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	; 0x806
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d8f2      	bhi.n	8000c04 <Game_Over+0x8c>
	}

}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	f507 6701 	add.w	r7, r7, #2064	; 0x810
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000830 	.word	0x20000830
 8000c30:	20000004 	.word	0x20000004
 8000c34:	080047b0 	.word	0x080047b0

08000c38 <Cloud_2>:

//Функция смещения элементов окружения вдоль дороги
//(возможно будет однажды (смена кадров или реализовать смешение векторов))

//Функция движения облаков
void Cloud_2(int cadr_prov) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b0af      	sub	sp, #188	; 0xbc
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	f200 83c2 	bhi.w	80013ce <Cloud_2+0x796>
 8000c4a:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <Cloud_2+0x18>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c61 	.word	0x08000c61
 8000c54:	08000e83 	.word	0x08000e83
 8000c58:	0800105f 	.word	0x0800105f
 8000c5c:	0800121b 	.word	0x0800121b
	switch(cadr_prov){

	case(1):
		//Чистка прошлой области_2 с кадра 4
		j = 1;
 8000c60:	4bc4      	ldr	r3, [pc, #784]	; (8000f74 <Cloud_2+0x33c>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	801a      	strh	r2, [r3, #0]
		for (int i = 19; i < 30; i++) {
 8000c66:	2313      	movs	r3, #19
 8000c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000c6c:	e00e      	b.n	8000c8c <Cloud_2+0x54>
			displ[j][i] = 1;
 8000c6e:	4bc1      	ldr	r3, [pc, #772]	; (8000f74 <Cloud_2+0x33c>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	49c1      	ldr	r1, [pc, #772]	; (8000f78 <Cloud_2+0x340>)
 8000c74:	015a      	lsls	r2, r3, #5
 8000c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c7a:	4413      	add	r3, r2
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 19; i < 30; i++) {
 8000c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c86:	3301      	adds	r3, #1
 8000c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000c90:	2b1d      	cmp	r3, #29
 8000c92:	ddec      	ble.n	8000c6e <Cloud_2+0x36>
		}
		for (int i = 18; i < 32; i++) {
 8000c94:	2312      	movs	r3, #18
 8000c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c9a:	e00f      	b.n	8000cbc <Cloud_2+0x84>
			displ[j - 1][i] = 1;
 8000c9c:	4bb5      	ldr	r3, [pc, #724]	; (8000f74 <Cloud_2+0x33c>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	49b5      	ldr	r1, [pc, #724]	; (8000f78 <Cloud_2+0x340>)
 8000ca4:	015a      	lsls	r2, r3, #5
 8000ca6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000caa:	4413      	add	r3, r2
 8000cac:	2201      	movs	r2, #1
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 18; i < 32; i++) {
 8000cb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	ddeb      	ble.n	8000c9c <Cloud_2+0x64>
		}
		//Отрисовка нового облака_2 кадра 1
		j = 6;
 8000cc4:	4bab      	ldr	r3, [pc, #684]	; (8000f74 <Cloud_2+0x33c>)
 8000cc6:	2206      	movs	r2, #6
 8000cc8:	801a      	strh	r2, [r3, #0]
		for (int i = 22; i < 30; i++) {
 8000cca:	2316      	movs	r3, #22
 8000ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000cd0:	e00e      	b.n	8000cf0 <Cloud_2+0xb8>
			displ[j][i] = 0;
 8000cd2:	4ba8      	ldr	r3, [pc, #672]	; (8000f74 <Cloud_2+0x33c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	49a8      	ldr	r1, [pc, #672]	; (8000f78 <Cloud_2+0x340>)
 8000cd8:	015a      	lsls	r2, r3, #5
 8000cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cde:	4413      	add	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 22; i < 30; i++) {
 8000ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000cf4:	2b1d      	cmp	r3, #29
 8000cf6:	ddec      	ble.n	8000cd2 <Cloud_2+0x9a>
		}
		for (int i = 23; i < 28; i++) {
 8000cf8:	2317      	movs	r3, #23
 8000cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000cfe:	e00f      	b.n	8000d20 <Cloud_2+0xe8>
			displ[j-1][i] = 0;
 8000d00:	4b9c      	ldr	r3, [pc, #624]	; (8000f74 <Cloud_2+0x33c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	499c      	ldr	r1, [pc, #624]	; (8000f78 <Cloud_2+0x340>)
 8000d08:	015a      	lsls	r2, r3, #5
 8000d0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d0e:	4413      	add	r3, r2
 8000d10:	2200      	movs	r2, #0
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 23; i < 28; i++) {
 8000d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d24:	2b1b      	cmp	r3, #27
 8000d26:	ddeb      	ble.n	8000d00 <Cloud_2+0xc8>
		}
		//Затирание  облака_1 на кадре 2
		j = 4;
 8000d28:	4b92      	ldr	r3, [pc, #584]	; (8000f74 <Cloud_2+0x33c>)
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	801a      	strh	r2, [r3, #0]
		for (int i = 3; i < 5; i++) {
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d34:	e00e      	b.n	8000d54 <Cloud_2+0x11c>
			displ[j][i] = 1;
 8000d36:	4b8f      	ldr	r3, [pc, #572]	; (8000f74 <Cloud_2+0x33c>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	498f      	ldr	r1, [pc, #572]	; (8000f78 <Cloud_2+0x340>)
 8000d3c:	015a      	lsls	r2, r3, #5
 8000d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d42:	4413      	add	r3, r2
 8000d44:	2201      	movs	r2, #1
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 3; i < 5; i++) {
 8000d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d4e:	3301      	adds	r3, #1
 8000d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000d54:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	ddec      	ble.n	8000d36 <Cloud_2+0xfe>
		}
		for (int i = 2; i < 6; i++) {
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d62:	e00f      	b.n	8000d84 <Cloud_2+0x14c>
			displ[j - 1][i] = 1;
 8000d64:	4b83      	ldr	r3, [pc, #524]	; (8000f74 <Cloud_2+0x33c>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4983      	ldr	r1, [pc, #524]	; (8000f78 <Cloud_2+0x340>)
 8000d6c:	015a      	lsls	r2, r3, #5
 8000d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d72:	4413      	add	r3, r2
 8000d74:	2201      	movs	r2, #1
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 6; i++) {
 8000d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d7e:	3301      	adds	r3, #1
 8000d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000d84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	ddeb      	ble.n	8000d64 <Cloud_2+0x12c>
		}
		for (int i = 2; i < 8; i++) {
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000d92:	e00f      	b.n	8000db4 <Cloud_2+0x17c>
			displ[j - 2][i] = 1;
 8000d94:	4b77      	ldr	r3, [pc, #476]	; (8000f74 <Cloud_2+0x33c>)
 8000d96:	881b      	ldrh	r3, [r3, #0]
 8000d98:	3b02      	subs	r3, #2
 8000d9a:	4977      	ldr	r1, [pc, #476]	; (8000f78 <Cloud_2+0x340>)
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000da2:	4413      	add	r3, r2
 8000da4:	2201      	movs	r2, #1
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 8; i++) {
 8000daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000dae:	3301      	adds	r3, #1
 8000db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000db8:	2b07      	cmp	r3, #7
 8000dba:	ddeb      	ble.n	8000d94 <Cloud_2+0x15c>
		}
		//Отрисовка облака_1 на кадре 3
		j = 3;
 8000dbc:	4b6d      	ldr	r3, [pc, #436]	; (8000f74 <Cloud_2+0x33c>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 10; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000dc8:	e00e      	b.n	8000de8 <Cloud_2+0x1b0>
			displ[j][i] = 0;
 8000dca:	4b6a      	ldr	r3, [pc, #424]	; (8000f74 <Cloud_2+0x33c>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	496a      	ldr	r1, [pc, #424]	; (8000f78 <Cloud_2+0x340>)
 8000dd0:	015a      	lsls	r2, r3, #5
 8000dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dd6:	4413      	add	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 8000dde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000de2:	3301      	adds	r3, #1
 8000de4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	ddec      	ble.n	8000dca <Cloud_2+0x192>
		}
		for (int i = 1; i < 8; i++) {
 8000df0:	2301      	movs	r3, #1
 8000df2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000df6:	e00f      	b.n	8000e18 <Cloud_2+0x1e0>
			displ[j - 1][i] = 0;
 8000df8:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <Cloud_2+0x33c>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	495e      	ldr	r1, [pc, #376]	; (8000f78 <Cloud_2+0x340>)
 8000e00:	015a      	lsls	r2, r3, #5
 8000e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e06:	4413      	add	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 1; i < 8; i++) {
 8000e0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e12:	3301      	adds	r3, #1
 8000e14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000e18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e1c:	2b07      	cmp	r3, #7
 8000e1e:	ddeb      	ble.n	8000df8 <Cloud_2+0x1c0>
		}
		for (int i = 2; i < 6; i++) {
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000e26:	e00f      	b.n	8000e48 <Cloud_2+0x210>
			displ[j - 2][i] = 0;
 8000e28:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <Cloud_2+0x33c>)
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	4952      	ldr	r1, [pc, #328]	; (8000f78 <Cloud_2+0x340>)
 8000e30:	015a      	lsls	r2, r3, #5
 8000e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e36:	4413      	add	r3, r2
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 6; i++) {
 8000e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e42:	3301      	adds	r3, #1
 8000e44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	ddeb      	ble.n	8000e28 <Cloud_2+0x1f0>
		}
		for (int i = 2; i < 5; i++) {
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000e56:	e00f      	b.n	8000e78 <Cloud_2+0x240>
			displ[j - 3][i] = 0;
 8000e58:	4b46      	ldr	r3, [pc, #280]	; (8000f74 <Cloud_2+0x33c>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	4946      	ldr	r1, [pc, #280]	; (8000f78 <Cloud_2+0x340>)
 8000e60:	015a      	lsls	r2, r3, #5
 8000e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e66:	4413      	add	r3, r2
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 5; i++) {
 8000e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e72:	3301      	adds	r3, #1
 8000e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	ddeb      	ble.n	8000e58 <Cloud_2+0x220>
		}
		break;
 8000e80:	e2a5      	b.n	80013ce <Cloud_2+0x796>

	case(2):
		//Чистка прошлой области_2 с кадра 1
		j = 6;
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <Cloud_2+0x33c>)
 8000e84:	2206      	movs	r2, #6
 8000e86:	801a      	strh	r2, [r3, #0]
		for (int i = 22; i < 30; i++) {
 8000e88:	2316      	movs	r3, #22
 8000e8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000e8e:	e00e      	b.n	8000eae <Cloud_2+0x276>
				displ[j][i] = 1;
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <Cloud_2+0x33c>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	4938      	ldr	r1, [pc, #224]	; (8000f78 <Cloud_2+0x340>)
 8000e96:	015a      	lsls	r2, r3, #5
 8000e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e9c:	4413      	add	r3, r2
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 22; i < 30; i++) {
 8000ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000eae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000eb2:	2b1d      	cmp	r3, #29
 8000eb4:	ddec      	ble.n	8000e90 <Cloud_2+0x258>
		}
		for (int i = 23; i < 28; i++) {
 8000eb6:	2317      	movs	r3, #23
 8000eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ebc:	e00f      	b.n	8000ede <Cloud_2+0x2a6>
				displ[j-1][i] = 1;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <Cloud_2+0x33c>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	492c      	ldr	r1, [pc, #176]	; (8000f78 <Cloud_2+0x340>)
 8000ec6:	015a      	lsls	r2, r3, #5
 8000ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ecc:	4413      	add	r3, r2
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 23; i < 28; i++) {
 8000ed4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ee2:	2b1b      	cmp	r3, #27
 8000ee4:	ddeb      	ble.n	8000ebe <Cloud_2+0x286>
		}

		//Отрисовка нового облака_2 кадра 2
		j = 4;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <Cloud_2+0x33c>)
 8000ee8:	2204      	movs	r2, #4
 8000eea:	801a      	strh	r2, [r3, #0]
		for (int i = 21; i < 31; i++) {
 8000eec:	2315      	movs	r3, #21
 8000eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ef2:	e00e      	b.n	8000f12 <Cloud_2+0x2da>
			displ[j][i] = 0;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <Cloud_2+0x33c>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	491f      	ldr	r1, [pc, #124]	; (8000f78 <Cloud_2+0x340>)
 8000efa:	015a      	lsls	r2, r3, #5
 8000efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f00:	4413      	add	r3, r2
 8000f02:	2200      	movs	r2, #0
 8000f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 21; i < 31; i++) {
 8000f08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000f12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f16:	2b1e      	cmp	r3, #30
 8000f18:	ddec      	ble.n	8000ef4 <Cloud_2+0x2bc>
		}
		for (int i = 22; i < 29; i++) {
 8000f1a:	2316      	movs	r3, #22
 8000f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f1e:	e00c      	b.n	8000f3a <Cloud_2+0x302>
			displ[j-1][i] = 0;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <Cloud_2+0x33c>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4914      	ldr	r1, [pc, #80]	; (8000f78 <Cloud_2+0x340>)
 8000f28:	015a      	lsls	r2, r3, #5
 8000f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f2c:	4413      	add	r3, r2
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 22; i < 29; i++) {
 8000f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f36:	3301      	adds	r3, #1
 8000f38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3c:	2b1c      	cmp	r3, #28
 8000f3e:	ddef      	ble.n	8000f20 <Cloud_2+0x2e8>
		}
		for (int i = 23; i < 28; i++) {
 8000f40:	2317      	movs	r3, #23
 8000f42:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f44:	e00c      	b.n	8000f60 <Cloud_2+0x328>
					displ[j-2][i] = 0;
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <Cloud_2+0x33c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	490a      	ldr	r1, [pc, #40]	; (8000f78 <Cloud_2+0x340>)
 8000f4e:	015a      	lsls	r2, r3, #5
 8000f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f52:	4413      	add	r3, r2
 8000f54:	2200      	movs	r2, #0
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 23; i < 28; i++) {
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f62:	2b1b      	cmp	r3, #27
 8000f64:	ddef      	ble.n	8000f46 <Cloud_2+0x30e>
		}
		//Чистка облака_1 с кадре 3
		j = 3;
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <Cloud_2+0x33c>)
 8000f68:	2203      	movs	r2, #3
 8000f6a:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 10; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	677b      	str	r3, [r7, #116]	; 0x74
 8000f70:	e010      	b.n	8000f94 <Cloud_2+0x35c>
 8000f72:	bf00      	nop
 8000f74:	20000834 	.word	0x20000834
 8000f78:	20000004 	.word	0x20000004
			displ[j][i] = 1;
 8000f7c:	4b9c      	ldr	r3, [pc, #624]	; (80011f0 <Cloud_2+0x5b8>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	499c      	ldr	r1, [pc, #624]	; (80011f4 <Cloud_2+0x5bc>)
 8000f82:	015a      	lsls	r2, r3, #5
 8000f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f86:	4413      	add	r3, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 8000f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f90:	3301      	adds	r3, #1
 8000f92:	677b      	str	r3, [r7, #116]	; 0x74
 8000f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f96:	2b09      	cmp	r3, #9
 8000f98:	ddf0      	ble.n	8000f7c <Cloud_2+0x344>
		}
		for (int i = 1; i < 8; i++) {
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	673b      	str	r3, [r7, #112]	; 0x70
 8000f9e:	e00c      	b.n	8000fba <Cloud_2+0x382>
			displ[j - 1][i] = 1;
 8000fa0:	4b93      	ldr	r3, [pc, #588]	; (80011f0 <Cloud_2+0x5b8>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	4993      	ldr	r1, [pc, #588]	; (80011f4 <Cloud_2+0x5bc>)
 8000fa8:	015a      	lsls	r2, r3, #5
 8000faa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fac:	4413      	add	r3, r2
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 1; i < 8; i++) {
 8000fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	673b      	str	r3, [r7, #112]	; 0x70
 8000fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000fbc:	2b07      	cmp	r3, #7
 8000fbe:	ddef      	ble.n	8000fa0 <Cloud_2+0x368>
		}
		for (int i = 2; i < 6; i++) {
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fc4:	e00c      	b.n	8000fe0 <Cloud_2+0x3a8>
			displ[j - 2][i] = 1;
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	; (80011f0 <Cloud_2+0x5b8>)
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4989      	ldr	r1, [pc, #548]	; (80011f4 <Cloud_2+0x5bc>)
 8000fce:	015a      	lsls	r2, r3, #5
 8000fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 6; i++) {
 8000fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fdc:	3301      	adds	r3, #1
 8000fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fe2:	2b05      	cmp	r3, #5
 8000fe4:	ddef      	ble.n	8000fc6 <Cloud_2+0x38e>
		}
		for (int i = 2; i < 5; i++) {
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fea:	e00c      	b.n	8001006 <Cloud_2+0x3ce>
			displ[j - 3][i] = 1;
 8000fec:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <Cloud_2+0x5b8>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	4980      	ldr	r1, [pc, #512]	; (80011f4 <Cloud_2+0x5bc>)
 8000ff4:	015a      	lsls	r2, r3, #5
 8000ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 5; i++) {
 8001000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001002:	3301      	adds	r3, #1
 8001004:	66bb      	str	r3, [r7, #104]	; 0x68
 8001006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001008:	2b04      	cmp	r3, #4
 800100a:	ddef      	ble.n	8000fec <Cloud_2+0x3b4>
		}
		//Отрисовка облака_1 с кадре 4
		j = 1;
 800100c:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <Cloud_2+0x5b8>)
 800100e:	2201      	movs	r2, #1
 8001010:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 12; i++) {
 8001012:	2300      	movs	r3, #0
 8001014:	667b      	str	r3, [r7, #100]	; 0x64
 8001016:	e00b      	b.n	8001030 <Cloud_2+0x3f8>
				displ[j][i] = 0;
 8001018:	4b75      	ldr	r3, [pc, #468]	; (80011f0 <Cloud_2+0x5b8>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4975      	ldr	r1, [pc, #468]	; (80011f4 <Cloud_2+0x5bc>)
 800101e:	015a      	lsls	r2, r3, #5
 8001020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001022:	4413      	add	r3, r2
 8001024:	2200      	movs	r2, #0
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 12; i++) {
 800102a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800102c:	3301      	adds	r3, #1
 800102e:	667b      	str	r3, [r7, #100]	; 0x64
 8001030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001032:	2b0b      	cmp	r3, #11
 8001034:	ddf0      	ble.n	8001018 <Cloud_2+0x3e0>
		}
		for (int i = 0; i < 10; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	663b      	str	r3, [r7, #96]	; 0x60
 800103a:	e00c      	b.n	8001056 <Cloud_2+0x41e>
			    displ[j-1][i] = 0;
 800103c:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <Cloud_2+0x5b8>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	3b01      	subs	r3, #1
 8001042:	496c      	ldr	r1, [pc, #432]	; (80011f4 <Cloud_2+0x5bc>)
 8001044:	015a      	lsls	r2, r3, #5
 8001046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001048:	4413      	add	r3, r2
 800104a:	2200      	movs	r2, #0
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 8001050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001052:	3301      	adds	r3, #1
 8001054:	663b      	str	r3, [r7, #96]	; 0x60
 8001056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001058:	2b09      	cmp	r3, #9
 800105a:	ddef      	ble.n	800103c <Cloud_2+0x404>
		}
		break;
 800105c:	e1b7      	b.n	80013ce <Cloud_2+0x796>

	case(3):
		//Чистка прошлой области_2 с кадра 2
		j = 4;
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <Cloud_2+0x5b8>)
 8001060:	2204      	movs	r2, #4
 8001062:	801a      	strh	r2, [r3, #0]
		for (int i = 21; i < 31; i++) {
 8001064:	2315      	movs	r3, #21
 8001066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001068:	e00b      	b.n	8001082 <Cloud_2+0x44a>
			displ[j][i] = 1;
 800106a:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <Cloud_2+0x5b8>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	4961      	ldr	r1, [pc, #388]	; (80011f4 <Cloud_2+0x5bc>)
 8001070:	015a      	lsls	r2, r3, #5
 8001072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001074:	4413      	add	r3, r2
 8001076:	2201      	movs	r2, #1
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 21; i < 31; i++) {
 800107c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800107e:	3301      	adds	r3, #1
 8001080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001084:	2b1e      	cmp	r3, #30
 8001086:	ddf0      	ble.n	800106a <Cloud_2+0x432>
		}
		for (int i = 22; i < 29; i++) {
 8001088:	2316      	movs	r3, #22
 800108a:	65bb      	str	r3, [r7, #88]	; 0x58
 800108c:	e00c      	b.n	80010a8 <Cloud_2+0x470>
			displ[j-1][i] = 1;
 800108e:	4b58      	ldr	r3, [pc, #352]	; (80011f0 <Cloud_2+0x5b8>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	3b01      	subs	r3, #1
 8001094:	4957      	ldr	r1, [pc, #348]	; (80011f4 <Cloud_2+0x5bc>)
 8001096:	015a      	lsls	r2, r3, #5
 8001098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800109a:	4413      	add	r3, r2
 800109c:	2201      	movs	r2, #1
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 22; i < 29; i++) {
 80010a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010a4:	3301      	adds	r3, #1
 80010a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80010a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010aa:	2b1c      	cmp	r3, #28
 80010ac:	ddef      	ble.n	800108e <Cloud_2+0x456>
		}
		for (int i = 23; i < 28; i++) {
 80010ae:	2317      	movs	r3, #23
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
 80010b2:	e00c      	b.n	80010ce <Cloud_2+0x496>
			displ[j-2][i] = 1;
 80010b4:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <Cloud_2+0x5b8>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	3b02      	subs	r3, #2
 80010ba:	494e      	ldr	r1, [pc, #312]	; (80011f4 <Cloud_2+0x5bc>)
 80010bc:	015a      	lsls	r2, r3, #5
 80010be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010c0:	4413      	add	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 23; i < 28; i++) {
 80010c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ca:	3301      	adds	r3, #1
 80010cc:	657b      	str	r3, [r7, #84]	; 0x54
 80010ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010d0:	2b1b      	cmp	r3, #27
 80010d2:	ddef      	ble.n	80010b4 <Cloud_2+0x47c>
		}

		//Отрисовка нового облака_2 кадра 3
		j = 3;
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <Cloud_2+0x5b8>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	801a      	strh	r2, [r3, #0]
		for (int i = 18; i < 32; i++) {
 80010da:	2312      	movs	r3, #18
 80010dc:	653b      	str	r3, [r7, #80]	; 0x50
 80010de:	e00b      	b.n	80010f8 <Cloud_2+0x4c0>
			displ[j][i] = 0;
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <Cloud_2+0x5b8>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	4943      	ldr	r1, [pc, #268]	; (80011f4 <Cloud_2+0x5bc>)
 80010e6:	015a      	lsls	r2, r3, #5
 80010e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ea:	4413      	add	r3, r2
 80010ec:	2200      	movs	r2, #0
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 18; i < 32; i++) {
 80010f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f4:	3301      	adds	r3, #1
 80010f6:	653b      	str	r3, [r7, #80]	; 0x50
 80010f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	ddf0      	ble.n	80010e0 <Cloud_2+0x4a8>
		}
		for (int i = 19; i < 30; i++) {
 80010fe:	2313      	movs	r3, #19
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001102:	e00c      	b.n	800111e <Cloud_2+0x4e6>
			displ[j-1][i] = 0;
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <Cloud_2+0x5b8>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3b01      	subs	r3, #1
 800110a:	493a      	ldr	r1, [pc, #232]	; (80011f4 <Cloud_2+0x5bc>)
 800110c:	015a      	lsls	r2, r3, #5
 800110e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001110:	4413      	add	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 19; i < 30; i++) {
 8001118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800111a:	3301      	adds	r3, #1
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800111e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001120:	2b1d      	cmp	r3, #29
 8001122:	ddef      	ble.n	8001104 <Cloud_2+0x4cc>
		}
		for (int i = 20; i < 28; i++) {
 8001124:	2314      	movs	r3, #20
 8001126:	64bb      	str	r3, [r7, #72]	; 0x48
 8001128:	e00c      	b.n	8001144 <Cloud_2+0x50c>
					displ[j-2][i] = 0;
 800112a:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <Cloud_2+0x5b8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	3b02      	subs	r3, #2
 8001130:	4930      	ldr	r1, [pc, #192]	; (80011f4 <Cloud_2+0x5bc>)
 8001132:	015a      	lsls	r2, r3, #5
 8001134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001136:	4413      	add	r3, r2
 8001138:	2200      	movs	r2, #0
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 20; i < 28; i++) {
 800113e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001140:	3301      	adds	r3, #1
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
 8001144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001146:	2b1b      	cmp	r3, #27
 8001148:	ddef      	ble.n	800112a <Cloud_2+0x4f2>
				}
		for (int i = 22; i < 28; i++) {
 800114a:	2316      	movs	r3, #22
 800114c:	647b      	str	r3, [r7, #68]	; 0x44
 800114e:	e00c      	b.n	800116a <Cloud_2+0x532>
					displ[j-3][i] = 0;
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <Cloud_2+0x5b8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3b03      	subs	r3, #3
 8001156:	4927      	ldr	r1, [pc, #156]	; (80011f4 <Cloud_2+0x5bc>)
 8001158:	015a      	lsls	r2, r3, #5
 800115a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800115c:	4413      	add	r3, r2
 800115e:	2200      	movs	r2, #0
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 22; i < 28; i++) {
 8001164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001166:	3301      	adds	r3, #1
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
 800116a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800116c:	2b1b      	cmp	r3, #27
 800116e:	ddef      	ble.n	8001150 <Cloud_2+0x518>
				}
		//Чистка прошлой области_1 с кадра 4
		j = 1;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Cloud_2+0x5b8>)
 8001172:	2201      	movs	r2, #1
 8001174:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 12; i++) {
 8001176:	2300      	movs	r3, #0
 8001178:	643b      	str	r3, [r7, #64]	; 0x40
 800117a:	e00b      	b.n	8001194 <Cloud_2+0x55c>
			displ[j][i] = 1;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Cloud_2+0x5b8>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	491c      	ldr	r1, [pc, #112]	; (80011f4 <Cloud_2+0x5bc>)
 8001182:	015a      	lsls	r2, r3, #5
 8001184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001186:	4413      	add	r3, r2
 8001188:	2201      	movs	r2, #1
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 12; i++) {
 800118e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001190:	3301      	adds	r3, #1
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
 8001194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001196:	2b0b      	cmp	r3, #11
 8001198:	ddf0      	ble.n	800117c <Cloud_2+0x544>
		}
		for (int i = 0; i < 10; i++) {
 800119a:	2300      	movs	r3, #0
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800119e:	e00c      	b.n	80011ba <Cloud_2+0x582>
			displ[j - 1][i] = 1;
 80011a0:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <Cloud_2+0x5b8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	4913      	ldr	r1, [pc, #76]	; (80011f4 <Cloud_2+0x5bc>)
 80011a8:	015a      	lsls	r2, r3, #5
 80011aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ac:	4413      	add	r3, r2
 80011ae:	2201      	movs	r2, #1
 80011b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < 10; i++) {
 80011b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011b6:	3301      	adds	r3, #1
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011bc:	2b09      	cmp	r3, #9
 80011be:	ddef      	ble.n	80011a0 <Cloud_2+0x568>
		}
		//Орисовка нового облака_1 кадр 1
		j = 6;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <Cloud_2+0x5b8>)
 80011c2:	2206      	movs	r2, #6
 80011c4:	801a      	strh	r2, [r3, #0]
		for (int i = 2; i < 7; i++) {
 80011c6:	2302      	movs	r3, #2
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80011ca:	e00b      	b.n	80011e4 <Cloud_2+0x5ac>
			displ[j][i] = 0;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <Cloud_2+0x5b8>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <Cloud_2+0x5bc>)
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d6:	4413      	add	r3, r2
 80011d8:	2200      	movs	r2, #0
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 7; i++) {
 80011de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e0:	3301      	adds	r3, #1
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80011e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	ddf0      	ble.n	80011cc <Cloud_2+0x594>
		}
		for (int i = 3; i < 5; i++) {
 80011ea:	2303      	movs	r3, #3
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
 80011ee:	e010      	b.n	8001212 <Cloud_2+0x5da>
 80011f0:	20000834 	.word	0x20000834
 80011f4:	20000004 	.word	0x20000004
			displ[j - 1][i] = 0;
 80011f8:	4b78      	ldr	r3, [pc, #480]	; (80013dc <Cloud_2+0x7a4>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4978      	ldr	r1, [pc, #480]	; (80013e0 <Cloud_2+0x7a8>)
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001204:	4413      	add	r3, r2
 8001206:	2200      	movs	r2, #0
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 3; i < 5; i++) {
 800120c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800120e:	3301      	adds	r3, #1
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
 8001212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001214:	2b04      	cmp	r3, #4
 8001216:	ddef      	ble.n	80011f8 <Cloud_2+0x5c0>
		}
		break;
 8001218:	e0d9      	b.n	80013ce <Cloud_2+0x796>

	case(4):
		//Затирание прошлого облака_2 кадр 3
		j = 3;
 800121a:	4b70      	ldr	r3, [pc, #448]	; (80013dc <Cloud_2+0x7a4>)
 800121c:	2203      	movs	r2, #3
 800121e:	801a      	strh	r2, [r3, #0]
		for (int i = 18; i < 32; i++) {
 8001220:	2312      	movs	r3, #18
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
 8001224:	e00b      	b.n	800123e <Cloud_2+0x606>
			displ[j][i] = 1;
 8001226:	4b6d      	ldr	r3, [pc, #436]	; (80013dc <Cloud_2+0x7a4>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	496d      	ldr	r1, [pc, #436]	; (80013e0 <Cloud_2+0x7a8>)
 800122c:	015a      	lsls	r2, r3, #5
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	4413      	add	r3, r2
 8001232:	2201      	movs	r2, #1
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 18; i < 32; i++) {
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	3301      	adds	r3, #1
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
 800123e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001240:	2b1f      	cmp	r3, #31
 8001242:	ddf0      	ble.n	8001226 <Cloud_2+0x5ee>
		}
		for (int i = 19; i < 30; i++) {
 8001244:	2313      	movs	r3, #19
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001248:	e00c      	b.n	8001264 <Cloud_2+0x62c>
			displ[j - 1][i] = 1;
 800124a:	4b64      	ldr	r3, [pc, #400]	; (80013dc <Cloud_2+0x7a4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	4963      	ldr	r1, [pc, #396]	; (80013e0 <Cloud_2+0x7a8>)
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	4413      	add	r3, r2
 8001258:	2201      	movs	r2, #1
 800125a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 19; i < 30; i++) {
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	3301      	adds	r3, #1
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	2b1d      	cmp	r3, #29
 8001268:	ddef      	ble.n	800124a <Cloud_2+0x612>
		}
		for (int i = 20; i < 28; i++) {
 800126a:	2314      	movs	r3, #20
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
 800126e:	e00c      	b.n	800128a <Cloud_2+0x652>
			displ[j - 2][i] = 1;
 8001270:	4b5a      	ldr	r3, [pc, #360]	; (80013dc <Cloud_2+0x7a4>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	3b02      	subs	r3, #2
 8001276:	495a      	ldr	r1, [pc, #360]	; (80013e0 <Cloud_2+0x7a8>)
 8001278:	015a      	lsls	r2, r3, #5
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	4413      	add	r3, r2
 800127e:	2201      	movs	r2, #1
 8001280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 20; i < 28; i++) {
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	3301      	adds	r3, #1
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	2b1b      	cmp	r3, #27
 800128e:	ddef      	ble.n	8001270 <Cloud_2+0x638>
		}
		for (int i = 22; i < 28; i++) {
 8001290:	2316      	movs	r3, #22
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
 8001294:	e00c      	b.n	80012b0 <Cloud_2+0x678>
			displ[j - 3][i] = 1;
 8001296:	4b51      	ldr	r3, [pc, #324]	; (80013dc <Cloud_2+0x7a4>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3b03      	subs	r3, #3
 800129c:	4950      	ldr	r1, [pc, #320]	; (80013e0 <Cloud_2+0x7a8>)
 800129e:	015a      	lsls	r2, r3, #5
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	4413      	add	r3, r2
 80012a4:	2201      	movs	r2, #1
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 22; i < 28; i++) {
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	3301      	adds	r3, #1
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	2b1b      	cmp	r3, #27
 80012b4:	ddef      	ble.n	8001296 <Cloud_2+0x65e>
		}
		//Отрисовка облака_2 кадра 4
		j = 1;
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <Cloud_2+0x7a4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	801a      	strh	r2, [r3, #0]
		for (int i = 19; i < 30; i++) {
 80012bc:	2313      	movs	r3, #19
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	e00b      	b.n	80012da <Cloud_2+0x6a2>
			displ[j][i] = 0;
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <Cloud_2+0x7a4>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4946      	ldr	r1, [pc, #280]	; (80013e0 <Cloud_2+0x7a8>)
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	4413      	add	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 19; i < 30; i++) {
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	3301      	adds	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2b1d      	cmp	r3, #29
 80012de:	ddf0      	ble.n	80012c2 <Cloud_2+0x68a>
		}
		for (int i = 18; i < 32; i++) {
 80012e0:	2312      	movs	r3, #18
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	e00c      	b.n	8001300 <Cloud_2+0x6c8>
			displ[j - 1][i] = 0;
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <Cloud_2+0x7a4>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	493c      	ldr	r1, [pc, #240]	; (80013e0 <Cloud_2+0x7a8>)
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	2200      	movs	r2, #0
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 18; i < 32; i++) {
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b1f      	cmp	r3, #31
 8001304:	ddef      	ble.n	80012e6 <Cloud_2+0x6ae>
		}
		//Затирание облака_1 с кадра 1
		j = 6;
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <Cloud_2+0x7a4>)
 8001308:	2206      	movs	r2, #6
 800130a:	801a      	strh	r2, [r3, #0]
		for (int i = 2; i < 7; i++) {
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e00b      	b.n	800132a <Cloud_2+0x6f2>
			displ[j][i] = 1;
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <Cloud_2+0x7a4>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4932      	ldr	r1, [pc, #200]	; (80013e0 <Cloud_2+0x7a8>)
 8001318:	015a      	lsls	r2, r3, #5
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	4413      	add	r3, r2
 800131e:	2201      	movs	r2, #1
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 7; i++) {
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	3301      	adds	r3, #1
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b06      	cmp	r3, #6
 800132e:	ddf0      	ble.n	8001312 <Cloud_2+0x6da>
		}
		for (int i = 3; i < 5; i++) {
 8001330:	2303      	movs	r3, #3
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e00c      	b.n	8001350 <Cloud_2+0x718>
			displ[j - 1][i] = 1;
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <Cloud_2+0x7a4>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	4928      	ldr	r1, [pc, #160]	; (80013e0 <Cloud_2+0x7a8>)
 800133e:	015a      	lsls	r2, r3, #5
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	4413      	add	r3, r2
 8001344:	2201      	movs	r2, #1
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 3; i < 5; i++) {
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b04      	cmp	r3, #4
 8001354:	ddef      	ble.n	8001336 <Cloud_2+0x6fe>
		}

		//Отрисовка облака_1 на кадре 2
		j = 4;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <Cloud_2+0x7a4>)
 8001358:	2204      	movs	r2, #4
 800135a:	801a      	strh	r2, [r3, #0]
		for (int i = 3; i < 5; i++) {
 800135c:	2303      	movs	r3, #3
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	e00b      	b.n	800137a <Cloud_2+0x742>
			displ[j][i] = 0;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <Cloud_2+0x7a4>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	491e      	ldr	r1, [pc, #120]	; (80013e0 <Cloud_2+0x7a8>)
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4413      	add	r3, r2
 800136e:	2200      	movs	r2, #0
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 3; i < 5; i++) {
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3301      	adds	r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b04      	cmp	r3, #4
 800137e:	ddf0      	ble.n	8001362 <Cloud_2+0x72a>
		}
		for (int i = 2; i < 6; i++) {
 8001380:	2302      	movs	r3, #2
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e00c      	b.n	80013a0 <Cloud_2+0x768>
			displ[j - 1][i] = 0;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <Cloud_2+0x7a4>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	4914      	ldr	r1, [pc, #80]	; (80013e0 <Cloud_2+0x7a8>)
 800138e:	015a      	lsls	r2, r3, #5
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	2200      	movs	r2, #0
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 6; i++) {
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3301      	adds	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	ddef      	ble.n	8001386 <Cloud_2+0x74e>
		}
		for (int i = 2; i < 8; i++) {
 80013a6:	2302      	movs	r3, #2
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	e00c      	b.n	80013c6 <Cloud_2+0x78e>
			displ[j - 2][i] = 0;
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <Cloud_2+0x7a4>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	3b02      	subs	r3, #2
 80013b2:	490b      	ldr	r1, [pc, #44]	; (80013e0 <Cloud_2+0x7a8>)
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4413      	add	r3, r2
 80013ba:	2200      	movs	r2, #0
 80013bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 2; i < 8; i++) {
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	ddef      	ble.n	80013ac <Cloud_2+0x774>
		}
	}

}
 80013cc:	e7ff      	b.n	80013ce <Cloud_2+0x796>
 80013ce:	bf00      	nop
 80013d0:	37bc      	adds	r7, #188	; 0xbc
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000834 	.word	0x20000834
 80013e0:	20000004 	.word	0x20000004

080013e4 <Display_Test>:

void Display_Test(uint8_t a, uint8_t b) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4602      	mov	r2, r0
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	460a      	mov	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
	Show_matrix(displ);
 80013f8:	482a      	ldr	r0, [pc, #168]	; (80014a4 <Display_Test+0xc0>)
 80013fa:	f7ff fb15 	bl	8000a28 <Show_matrix>
	if (a == 16) {
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d149      	bne.n	800149a <Display_Test+0xb6>
		Way_Run(displ);
 8001406:	4827      	ldr	r0, [pc, #156]	; (80014a4 <Display_Test+0xc0>)
 8001408:	f7ff f8f2 	bl	80005f0 <Way_Run>
		Cloud_2(cadr_cloud);
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <Display_Test+0xc4>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fc11 	bl	8000c38 <Cloud_2>
		//Счётчик кадров облаокв и задержка вывода ( смещение должно быть медленее, чем дви
		//жение дорожной разметки)
		if (pos == 4){
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <Display_Test+0xc8>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	2b04      	cmp	r3, #4
 800141c:	d110      	bne.n	8001440 <Display_Test+0x5c>
			pos = 0;
 800141e:	4b23      	ldr	r3, [pc, #140]	; (80014ac <Display_Test+0xc8>)
 8001420:	2200      	movs	r2, #0
 8001422:	801a      	strh	r2, [r3, #0]
			if (cadr_cloud == 4) {
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <Display_Test+0xc4>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d103      	bne.n	8001434 <Display_Test+0x50>
					cadr_cloud = 1;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <Display_Test+0xc4>)
 800142e:	2201      	movs	r2, #1
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	e005      	b.n	8001440 <Display_Test+0x5c>
			}
			else {
				cadr_cloud++;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <Display_Test+0xc4>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	b29a      	uxth	r2, r3
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <Display_Test+0xc4>)
 800143e:	801a      	strh	r2, [r3, #0]
			}
		}
		pos++;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <Display_Test+0xc8>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <Display_Test+0xc8>)
 800144a:	801a      	strh	r2, [r3, #0]
		Danger_spawn(b);
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fa1e 	bl	8000894 <Danger_spawn>
		Callyzi_Car();
 8001458:	f7ff f972 	bl	8000740 <Callyzi_Car>
		if ((Danger_offset() == 0)||(Callyzi_Car() == 0)){
 800145c:	f7ff fa3c 	bl	80008d8 <Danger_offset>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <Display_Test+0x8c>
 8001466:	f7ff f96b 	bl	8000740 <Callyzi_Car>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d114      	bne.n	800149a <Display_Test+0xb6>
			Game_Over();
 8001470:	f7ff fb82 	bl	8000b78 <Game_Over>
			int displ[16][32] = {
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <Display_Test+0xcc>)
 800147a:	4618      	mov	r0, r3
 800147c:	4611      	mov	r1, r2
 800147e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001482:	461a      	mov	r2, r3
 8001484:	f003 f946 	bl	8004714 <memcpy>
			{1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1}
			};
			move = 0;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <Display_Test+0xd0>)
 800148a:	2200      	movs	r2, #0
 800148c:	801a      	strh	r2, [r3, #0]
			flag = 0;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <Display_Test+0xd4>)
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
			old_car_x = 0;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <Display_Test+0xd8>)
 8001496:	2200      	movs	r2, #0
 8001498:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800149a:	bf00      	nop
 800149c:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000002 	.word	0x20000002
 80014b0:	08004fb0 	.word	0x08004fb0
 80014b4:	2000082c 	.word	0x2000082c
 80014b8:	20000832 	.word	0x20000832
 80014bc:	20000830 	.word	0x20000830

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c6:	f000 fe75 	bl	80021b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f853 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 faf7 	bl	8001ac0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014d2:	f000 f911 	bl	80016f8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80014d6:	f000 faa5 	bl	8001a24 <MX_TIM2_Init>
  MX_ADC1_Init();
 80014da:	f000 f8bb 	bl	8001654 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014de:	f000 fa4f 	bl	8001980 <MX_TIM1_Init>
  MX_SPI2_Init();
 80014e2:	f000 f93f 	bl	8001764 <MX_SPI2_Init>
  MX_SPI3_Init();
 80014e6:	f000 f973 	bl	80017d0 <MX_SPI3_Init>
  MX_SPI4_Init();
 80014ea:	f000 f9a7 	bl	800183c <MX_SPI4_Init>
  MX_SPI6_Init();
 80014ee:	f000 fa11 	bl	8001914 <MX_SPI6_Init>
  MX_SPI5_Init();
 80014f2:	f000 f9d9 	bl	80018a8 <MX_SPI5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t cadr_show = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
  uint8_t b = 0; //Количесто
 80014fa:	2300      	movs	r3, #0
 80014fc:	71bb      	strb	r3, [r7, #6]
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80014fe:	4819      	ldr	r0, [pc, #100]	; (8001564 <main+0xa4>)
 8001500:	f000 ff32 	bl	8002368 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,10);
 8001504:	210a      	movs	r1, #10
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <main+0xa4>)
 8001508:	f001 f833 	bl	8002572 <HAL_ADC_PollForConversion>
	  g = HAL_ADC_GetValue(&hadc1);
 800150c:	4815      	ldr	r0, [pc, #84]	; (8001564 <main+0xa4>)
 800150e:	f001 f8bb 	bl	8002688 <HAL_ADC_GetValue>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <main+0xa8>)
 8001518:	801a      	strh	r2, [r3, #0]
	  move = g/292;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <main+0xa8>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <main+0xac>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <main+0xb0>)
 800152e:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <main+0xa4>)
 8001532:	f000 ffeb 	bl	800250c <HAL_ADC_Stop>
	  cadr_show++;
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3301      	adds	r3, #1
 800153a:	71fb      	strb	r3, [r7, #7]
	  Display_Test(cadr_show,b);
 800153c:	79ba      	ldrb	r2, [r7, #6]
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff4e 	bl	80013e4 <Display_Test>
	  if (cadr_show == 16) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	2b10      	cmp	r3, #16
 800154c:	d104      	bne.n	8001558 <main+0x98>
		  cadr_show = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
		  b++;
 8001552:	79bb      	ldrb	r3, [r7, #6]
 8001554:	3301      	adds	r3, #1
 8001556:	71bb      	strb	r3, [r7, #6]
	  };
	  //Тут число 44 - число элементов в массиве препядствия
	  if (b >= 44) {
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	2b2b      	cmp	r3, #43	; 0x2b
 800155c:	d9cf      	bls.n	80014fe <main+0x3e>
		  b = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71bb      	strb	r3, [r7, #6]
	  HAL_ADC_Start(&hadc1);
 8001562:	e7cc      	b.n	80014fe <main+0x3e>
 8001564:	20000998 	.word	0x20000998
 8001568:	20000836 	.word	0x20000836
 800156c:	70381c0f 	.word	0x70381c0f
 8001570:	2000082c 	.word	0x2000082c

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b094      	sub	sp, #80	; 0x50
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0320 	add.w	r3, r7, #32
 800157e:	2230      	movs	r2, #48	; 0x30
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f003 f8d4 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <SystemClock_Config+0xd8>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <SystemClock_Config+0xd8>)
 80015a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <SystemClock_Config+0xd8>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <SystemClock_Config+0xdc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <SystemClock_Config+0xdc>)
 80015be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <SystemClock_Config+0xdc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d8:	2310      	movs	r3, #16
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e4:	2308      	movs	r3, #8
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80015e8:	23b4      	movs	r3, #180	; 0xb4
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f4:	f107 0320 	add.w	r3, r7, #32
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fda9 	bl	8003150 <HAL_RCC_OscConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001604:	f000 fb1e 	bl	8001c44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001608:	f001 fd52 	bl	80030b0 <HAL_PWREx_EnableOverDrive>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001612:	f000 fb17 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001616:	230f      	movs	r3, #15
 8001618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161a:	2302      	movs	r3, #2
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2105      	movs	r1, #5
 8001634:	4618      	mov	r0, r3
 8001636:	f002 f803 	bl	8003640 <HAL_RCC_ClockConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001640:	f000 fb00 	bl	8001c44 <Error_Handler>
  }
}
 8001644:	bf00      	nop
 8001646:	3750      	adds	r7, #80	; 0x50
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40023800 	.word	0x40023800
 8001650:	40007000 	.word	0x40007000

08001654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165a:	463b      	mov	r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <MX_ADC1_Init+0x98>)
 8001668:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <MX_ADC1_Init+0x9c>)
 800166a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <MX_ADC1_Init+0x98>)
 800166e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001672:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <MX_ADC1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_ADC1_Init+0x98>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_ADC1_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_ADC1_Init+0x98>)
 8001690:	2200      	movs	r2, #0
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001694:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_ADC1_Init+0x98>)
 8001696:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <MX_ADC1_Init+0xa0>)
 8001698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800169a:	4b14      	ldr	r3, [pc, #80]	; (80016ec <MX_ADC1_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_ADC1_Init+0x98>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016a6:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_ADC1_Init+0x98>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_ADC1_Init+0x98>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_ADC1_Init+0x98>)
 80016b6:	f000 fe13 	bl	80022e0 <HAL_ADC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016c0:	f000 fac0 	bl	8001c44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_ADC1_Init+0x98>)
 80016d6:	f000 ffe5 	bl	80026a4 <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016e0:	f000 fab0 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000998 	.word	0x20000998
 80016f0:	40012000 	.word	0x40012000
 80016f4:	0f000001 	.word	0x0f000001

080016f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI1_Init+0x64>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <MX_SPI1_Init+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001702:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_SPI1_Init+0x64>)
 8001704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_SPI1_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_SPI1_Init+0x64>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI1_Init+0x64>)
 8001724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI1_Init+0x64>)
 800172c:	2208      	movs	r2, #8
 800172e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_SPI1_Init+0x64>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI1_Init+0x64>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_SPI1_Init+0x64>)
 800173e:	2200      	movs	r2, #0
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI1_Init+0x64>)
 8001744:	220a      	movs	r2, #10
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_SPI1_Init+0x64>)
 800174a:	f002 f915 	bl	8003978 <HAL_SPI_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 fa76 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000a80 	.word	0x20000a80
 8001760:	40013000 	.word	0x40013000

08001764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_SPI2_Init+0x64>)
 800176a:	4a18      	ldr	r2, [pc, #96]	; (80017cc <MX_SPI2_Init+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_SPI2_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001794:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <MX_SPI2_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <MX_SPI2_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a8:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017b0:	220a      	movs	r2, #10
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_SPI2_Init+0x64>)
 80017b6:	f002 f8df 	bl	8003978 <HAL_SPI_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017c0:	f000 fa40 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000890 	.word	0x20000890
 80017cc:	40003800 	.word	0x40003800

080017d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_SPI3_Init+0x64>)
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <MX_SPI3_Init+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_SPI3_Init+0x64>)
 80017dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_SPI3_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_SPI3_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_SPI3_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_SPI3_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_SPI3_Init+0x64>)
 80017fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001800:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_SPI3_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_SPI3_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_SPI3_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_SPI3_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_SPI3_Init+0x64>)
 800181c:	220a      	movs	r2, #10
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_SPI3_Init+0x64>)
 8001822:	f002 f8a9 	bl	8003978 <HAL_SPI_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800182c:	f000 fa0a 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000940 	.word	0x20000940
 8001838:	40003c00 	.word	0x40003c00

0800183c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <MX_SPI4_Init+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800184c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_SPI4_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_SPI4_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_SPI4_Init+0x64>)
 8001888:	220a      	movs	r2, #10
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_SPI4_Init+0x64>)
 800188e:	f002 f873 	bl	8003978 <HAL_SPI_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001898:	f000 f9d4 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200009e0 	.word	0x200009e0
 80018a4:	40013400 	.word	0x40013400

080018a8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI5_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_SPI5_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI5_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI5_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI5_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI5_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI5_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI5_Init+0x64>)
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI5_Init+0x64>)
 80018dc:	2208      	movs	r2, #8
 80018de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI5_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI5_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI5_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI5_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI5_Init+0x64>)
 80018fa:	f002 f83d 	bl	8003978 <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001904:	f000 f99e 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20000838 	.word	0x20000838
 8001910:	40015000 	.word	0x40015000

08001914 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_SPI6_Init+0x64>)
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <MX_SPI6_Init+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <MX_SPI6_Init+0x64>)
 8001920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001924:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_SPI6_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_SPI6_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_SPI6_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_SPI6_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_SPI6_Init+0x64>)
 8001940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001944:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_SPI6_Init+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <MX_SPI6_Init+0x64>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_SPI6_Init+0x64>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <MX_SPI6_Init+0x64>)
 800195a:	2200      	movs	r2, #0
 800195c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 10;
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_SPI6_Init+0x64>)
 8001960:	220a      	movs	r2, #10
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <MX_SPI6_Init+0x64>)
 8001966:	f002 f807 	bl	8003978 <HAL_SPI_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_SPI6_Init+0x60>
  {
    Error_Handler();
 8001970:	f000 f968 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	200008e8 	.word	0x200008e8
 800197c:	40015400 	.word	0x40015400

08001980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_TIM1_Init+0x9c>)
 800199e:	4a20      	ldr	r2, [pc, #128]	; (8001a20 <MX_TIM1_Init+0xa0>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019ca:	4814      	ldr	r0, [pc, #80]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019cc:	f002 fa64 	bl	8003e98 <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80019d6:	f000 f935 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_TIM1_Init+0x9c>)
 80019e8:	f002 fbad 	bl	8004146 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80019f2:	f000 f927 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_TIM1_Init+0x9c>)
 8001a04:	f002 fdd2 	bl	80045ac <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a0e:	f000 f919 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000a38 	.word	0x20000a38
 8001a20:	40010000 	.word	0x40010000

08001a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001a48:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a6c:	f002 fa14 	bl	8003e98 <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a76:	f000 f8e5 	bl	8001c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_TIM2_Init+0x98>)
 8001a88:	f002 fb5d 	bl	8004146 <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a92:	f000 f8d7 	bl	8001c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	; (8001abc <MX_TIM2_Init+0x98>)
 8001aa4:	f002 fd82 	bl	80045ac <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001aae:	f000 f8c9 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000ad8 	.word	0x20000ad8

08001ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
 8001ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a55      	ldr	r2, [pc, #340]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	4b4f      	ldr	r3, [pc, #316]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a32      	ldr	r2, [pc, #200]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <MX_GPIO_Init+0x174>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbc:	481e      	ldr	r0, [pc, #120]	; (8001c38 <MX_GPIO_Init+0x178>)
 8001bbe:	f001 fa5d 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, A_Pin|B_Pin|OE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	21f0      	movs	r1, #240	; 0xf0
 8001bc6:	481d      	ldr	r0, [pc, #116]	; (8001c3c <MX_GPIO_Init+0x17c>)
 8001bc8:	f001 fa58 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2180      	movs	r1, #128	; 0x80
 8001bd0:	481b      	ldr	r0, [pc, #108]	; (8001c40 <MX_GPIO_Init+0x180>)
 8001bd2:	f001 fa53 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MX_GPIO_Init+0x178>)
 8001bf0:	f001 f898 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin OE_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|OE_Pin|SCLK_Pin;
 8001bf4:	23f0      	movs	r3, #240	; 0xf0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480c      	ldr	r0, [pc, #48]	; (8001c3c <MX_GPIO_Init+0x17c>)
 8001c0c:	f001 f88a 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <MX_GPIO_Init+0x180>)
 8001c28:	f001 f87c 	bl	8002d24 <HAL_GPIO_Init>

}
 8001c2c:	bf00      	nop
 8001c2e:	3738      	adds	r7, #56	; 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40020400 	.word	0x40020400

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <Error_Handler+0x8>
	...

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_MspInit+0x58>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_MspInit+0x58>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_MspInit+0x58>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x58>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_MspInit+0x58>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x58>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2100      	movs	r1, #0
 8001c92:	2005      	movs	r0, #5
 8001c94:	f001 f80f 	bl	8002cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c98:	2005      	movs	r0, #5
 8001c9a:	f001 f828 	bl	8002cee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_ADC_MspInit+0x7c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d127      	bne.n	8001d1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_ADC_MspInit+0x80>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d06:	2310      	movs	r3, #16
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_ADC_MspInit+0x84>)
 8001d1a:	f001 f803 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000

08001d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b094      	sub	sp, #80	; 0x50
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a8c      	ldr	r2, [pc, #560]	; (8001f84 <HAL_SPI_MspInit+0x250>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12c      	bne.n	8001db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b88      	ldr	r3, [pc, #544]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
 8001d76:	4b84      	ldr	r3, [pc, #528]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a83      	ldr	r2, [pc, #524]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|MOSI_Pin;
 8001d8e:	23a0      	movs	r3, #160	; 0xa0
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d9e:	2305      	movs	r3, #5
 8001da0:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001da6:	4619      	mov	r1, r3
 8001da8:	4878      	ldr	r0, [pc, #480]	; (8001f8c <HAL_SPI_MspInit+0x258>)
 8001daa:	f000 ffbb 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001dae:	e131      	b.n	8002014 <HAL_SPI_MspInit+0x2e0>
  else if(hspi->Instance==SPI2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a76      	ldr	r2, [pc, #472]	; (8001f90 <HAL_SPI_MspInit+0x25c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d14b      	bne.n	8001e52 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a71      	ldr	r2, [pc, #452]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	4b6b      	ldr	r3, [pc, #428]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a6a      	ldr	r2, [pc, #424]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b68      	ldr	r3, [pc, #416]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df6:	4b64      	ldr	r3, [pc, #400]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a63      	ldr	r2, [pc, #396]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b61      	ldr	r3, [pc, #388]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e26:	4619      	mov	r1, r3
 8001e28:	485a      	ldr	r0, [pc, #360]	; (8001f94 <HAL_SPI_MspInit+0x260>)
 8001e2a:	f000 ff7b 	bl	8002d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e40:	2305      	movs	r3, #5
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4853      	ldr	r0, [pc, #332]	; (8001f98 <HAL_SPI_MspInit+0x264>)
 8001e4c:	f000 ff6a 	bl	8002d24 <HAL_GPIO_Init>
}
 8001e50:	e0e0      	b.n	8002014 <HAL_SPI_MspInit+0x2e0>
  else if(hspi->Instance==SPI3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a51      	ldr	r2, [pc, #324]	; (8001f9c <HAL_SPI_MspInit+0x268>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d12d      	bne.n	8001eb8 <HAL_SPI_MspInit+0x184>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e60:	4b49      	ldr	r3, [pc, #292]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6c:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
 8001e7c:	4b42      	ldr	r3, [pc, #264]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6313      	str	r3, [r2, #48]	; 0x30
 8001e88:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	623b      	str	r3, [r7, #32]
 8001e92:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001e94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4838      	ldr	r0, [pc, #224]	; (8001f94 <HAL_SPI_MspInit+0x260>)
 8001eb2:	f000 ff37 	bl	8002d24 <HAL_GPIO_Init>
}
 8001eb6:	e0ad      	b.n	8002014 <HAL_SPI_MspInit+0x2e0>
  else if(hspi->Instance==SPI4)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <HAL_SPI_MspInit+0x26c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12c      	bne.n	8001f1c <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	4a2f      	ldr	r2, [pc, #188]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	4b29      	ldr	r3, [pc, #164]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a28      	ldr	r2, [pc, #160]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ee8:	f043 0310 	orr.w	r3, r3, #16
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001efa:	2344      	movs	r3, #68	; 0x44
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f12:	4619      	mov	r1, r3
 8001f14:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <HAL_SPI_MspInit+0x270>)
 8001f16:	f000 ff05 	bl	8002d24 <HAL_GPIO_Init>
}
 8001f1a:	e07b      	b.n	8002014 <HAL_SPI_MspInit+0x2e0>
  else if(hspi->Instance==SPI5)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <HAL_SPI_MspInit+0x274>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d144      	bne.n	8001fb0 <HAL_SPI_MspInit+0x27c>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f34:	6453      	str	r3, [r2, #68]	; 0x44
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001f4c:	f043 0320 	orr.w	r3, r3, #32
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_SPI_MspInit+0x254>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001f5e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f70:	2305      	movs	r3, #5
 8001f72:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480c      	ldr	r0, [pc, #48]	; (8001fac <HAL_SPI_MspInit+0x278>)
 8001f7c:	f000 fed2 	bl	8002d24 <HAL_GPIO_Init>
}
 8001f80:	e048      	b.n	8002014 <HAL_SPI_MspInit+0x2e0>
 8001f82:	bf00      	nop
 8001f84:	40013000 	.word	0x40013000
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40003800 	.word	0x40003800
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	40003c00 	.word	0x40003c00
 8001fa0:	40013400 	.word	0x40013400
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40015000 	.word	0x40015000
 8001fac:	40021400 	.word	0x40021400
  else if(hspi->Instance==SPI6)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_SPI_MspInit+0x2e8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12c      	bne.n	8002014 <HAL_SPI_MspInit+0x2e0>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_SPI_MspInit+0x2ec>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_SPI_MspInit+0x2ec>)
 8001fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_SPI_MspInit+0x2ec>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_SPI_MspInit+0x2ec>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a10      	ldr	r2, [pc, #64]	; (8002020 <HAL_SPI_MspInit+0x2ec>)
 8001fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_SPI_MspInit+0x2ec>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001ff2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002004:	2305      	movs	r3, #5
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800200c:	4619      	mov	r1, r3
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <HAL_SPI_MspInit+0x2f0>)
 8002010:	f000 fe88 	bl	8002d24 <HAL_GPIO_Init>
}
 8002014:	bf00      	nop
 8002016:	3750      	adds	r7, #80	; 0x50
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40015400 	.word	0x40015400
 8002020:	40023800 	.word	0x40023800
 8002024:	40021800 	.word	0x40021800

08002028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_TIM_Base_MspInit+0x80>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d116      	bne.n	8002068 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_TIM_Base_MspInit+0x84>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <HAL_TIM_Base_MspInit+0x84>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_TIM_Base_MspInit+0x84>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2019      	movs	r0, #25
 800205c:	f000 fe2b 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002060:	2019      	movs	r0, #25
 8002062:	f000 fe44 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002066:	e01a      	b.n	800209e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d115      	bne.n	800209e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_TIM_Base_MspInit+0x84>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <HAL_TIM_Base_MspInit+0x84>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_TIM_Base_MspInit+0x84>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	201c      	movs	r0, #28
 8002094:	f000 fe0f 	bl	8002cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002098:	201c      	movs	r0, #28
 800209a:	f000 fe28 	bl	8002cee <HAL_NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000
 80020ac:	40023800 	.word	0x40023800

080020b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <NMI_Handler+0x4>

080020b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler+0x4>

080020c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <UsageFault_Handler+0x4>

080020ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fc:	f000 f8ac 	bl	8002258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800211a:	f001 ff0c 	bl	8003f36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000a38 	.word	0x20000a38

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM2_IRQHandler+0x10>)
 800212e:	f001 ff02 	bl	8003f36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000ad8 	.word	0x20000ad8

0800213c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <SystemInit+0x20>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <SystemInit+0x20>)
 8002148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800214c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002160:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002198 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002164:	480d      	ldr	r0, [pc, #52]	; (800219c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002166:	490e      	ldr	r1, [pc, #56]	; (80021a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800216c:	e002      	b.n	8002174 <LoopCopyDataInit>

0800216e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002172:	3304      	adds	r3, #4

08002174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002178:	d3f9      	bcc.n	800216e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800217c:	4c0b      	ldr	r4, [pc, #44]	; (80021ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002180:	e001      	b.n	8002186 <LoopFillZerobss>

08002182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002184:	3204      	adds	r2, #4

08002186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002188:	d3fb      	bcc.n	8002182 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800218a:	f7ff ffd7 	bl	800213c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218e:	f002 fa9d 	bl	80046cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002192:	f7ff f995 	bl	80014c0 <main>
  bx  lr    
 8002196:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002198:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a0:	20000810 	.word	0x20000810
  ldr r2, =_sidata
 80021a4:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 80021a8:	20000810 	.word	0x20000810
  ldr r4, =_ebss
 80021ac:	20000b24 	.word	0x20000b24

080021b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b0:	e7fe      	b.n	80021b0 <ADC_IRQHandler>
	...

080021b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0d      	ldr	r2, [pc, #52]	; (80021f4 <HAL_Init+0x40>)
 80021be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_Init+0x40>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <HAL_Init+0x40>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_Init+0x40>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_Init+0x40>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 fd5f 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e2:	200f      	movs	r0, #15
 80021e4:	f000 f808 	bl	80021f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e8:	f7ff fd32 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00

080021f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x54>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x58>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002212:	fbb2 f3f3 	udiv	r3, r2, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fd77 	bl	8002d0a <HAL_SYSTICK_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00e      	b.n	8002244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d80a      	bhi.n	8002242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f000 fd3f 	bl	8002cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002238:	4a06      	ldr	r2, [pc, #24]	; (8002254 <HAL_InitTick+0x5c>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e000      	b.n	8002244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000804 	.word	0x20000804
 8002250:	2000080c 	.word	0x2000080c
 8002254:	20000808 	.word	0x20000808

08002258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x20>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x24>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4413      	add	r3, r2
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <HAL_IncTick+0x24>)
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	2000080c 	.word	0x2000080c
 800227c:	20000b20 	.word	0x20000b20

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_GetTick+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000b20 	.word	0x20000b20

08002298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff ffee 	bl	8002280 <HAL_GetTick>
 80022a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d005      	beq.n	80022be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_Delay+0x44>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022be:	bf00      	nop
 80022c0:	f7ff ffde 	bl	8002280 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d8f7      	bhi.n	80022c0 <HAL_Delay+0x28>
  {
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000080c 	.word	0x2000080c

080022e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e033      	b.n	800235e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d109      	bne.n	8002312 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7ff fcd4 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002326:	f023 0302 	bic.w	r3, r3, #2
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fae8 	bl	8002908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	f043 0201 	orr.w	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
 800234e:	e001      	b.n	8002354 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800235c:	7bfb      	ldrb	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Start+0x1a>
 800237e:	2302      	movs	r3, #2
 8002380:	e0b2      	b.n	80024e8 <HAL_ADC_Start+0x180>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d018      	beq.n	80023ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023a8:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_ADC_Start+0x18c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_ADC_Start+0x190>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0c9a      	lsrs	r2, r3, #18
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d17a      	bne.n	80024ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002402:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002416:	d106      	bne.n	8002426 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	f023 0206 	bic.w	r2, r3, #6
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
 8002424:	e002      	b.n	800242c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002434:	4b31      	ldr	r3, [pc, #196]	; (80024fc <HAL_ADC_Start+0x194>)
 8002436:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002440:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	2b00      	cmp	r3, #0
 800244c:	d12a      	bne.n	80024a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <HAL_ADC_Start+0x198>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d015      	beq.n	8002484 <HAL_ADC_Start+0x11c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_ADC_Start+0x19c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d105      	bne.n	800246e <HAL_ADC_Start+0x106>
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_ADC_Start+0x194>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_ADC_Start+0x1a0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d136      	bne.n	80024e6 <HAL_ADC_Start+0x17e>
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_ADC_Start+0x194>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d130      	bne.n	80024e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d129      	bne.n	80024e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	e020      	b.n	80024e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a15      	ldr	r2, [pc, #84]	; (8002500 <HAL_ADC_Start+0x198>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d11b      	bne.n	80024e6 <HAL_ADC_Start+0x17e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d114      	bne.n	80024e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	e00b      	b.n	80024e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	20000804 	.word	0x20000804
 80024f8:	431bde83 	.word	0x431bde83
 80024fc:	40012300 	.word	0x40012300
 8002500:	40012000 	.word	0x40012000
 8002504:	40012100 	.word	0x40012100
 8002508:	40012200 	.word	0x40012200

0800250c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_Stop+0x16>
 800251e:	2302      	movs	r3, #2
 8002520:	e021      	b.n	8002566 <HAL_ADC_Stop+0x5a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	f043 0201 	orr.w	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258e:	d113      	bne.n	80025b8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	d10b      	bne.n	80025b8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e063      	b.n	8002680 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80025b8:	f7ff fe62 	bl	8002280 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025be:	e021      	b.n	8002604 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c6:	d01d      	beq.n	8002604 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_ADC_PollForConversion+0x6c>
 80025ce:	f7ff fe57 	bl	8002280 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d212      	bcs.n	8002604 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d00b      	beq.n	8002604 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e03d      	b.n	8002680 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d1d6      	bne.n	80025c0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f06f 0212 	mvn.w	r2, #18
 800261a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d123      	bne.n	800267e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800263a:	2b00      	cmp	r3, #0
 800263c:	d11f      	bne.n	800267e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002656:	2b00      	cmp	r3, #0
 8002658:	d111      	bne.n	800267e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e113      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x244>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d925      	bls.n	800271c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68d9      	ldr	r1, [r3, #12]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	3b1e      	subs	r3, #30
 80026e6:	2207      	movs	r2, #7
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43da      	mvns	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	400a      	ands	r2, r1
 80026f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68d9      	ldr	r1, [r3, #12]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	4618      	mov	r0, r3
 8002708:	4603      	mov	r3, r0
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4403      	add	r3, r0
 800270e:	3b1e      	subs	r3, #30
 8002710:	409a      	lsls	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e022      	b.n	8002762 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	2207      	movs	r2, #7
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	400a      	ands	r2, r1
 800273e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6919      	ldr	r1, [r3, #16]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	4603      	mov	r3, r0
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4403      	add	r3, r0
 8002758:	409a      	lsls	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b06      	cmp	r3, #6
 8002768:	d824      	bhi.n	80027b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	3b05      	subs	r3, #5
 800277c:	221f      	movs	r2, #31
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	3b05      	subs	r3, #5
 80027a6:	fa00 f203 	lsl.w	r2, r0, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
 80027b2:	e04c      	b.n	800284e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d824      	bhi.n	8002806 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b23      	subs	r3, #35	; 0x23
 80027ce:	221f      	movs	r2, #31
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43da      	mvns	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	400a      	ands	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	3b23      	subs	r3, #35	; 0x23
 80027f8:	fa00 f203 	lsl.w	r2, r0, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
 8002804:	e023      	b.n	800284e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3b41      	subs	r3, #65	; 0x41
 8002818:	221f      	movs	r2, #31
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	400a      	ands	r2, r1
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29b      	uxth	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	3b41      	subs	r3, #65	; 0x41
 8002842:	fa00 f203 	lsl.w	r2, r0, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_ADC_ConfigChannel+0x250>)
 8002850:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_ADC_ConfigChannel+0x254>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d10f      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1d8>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b12      	cmp	r3, #18
 8002862:	d10b      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1d      	ldr	r2, [pc, #116]	; (80028f8 <HAL_ADC_ConfigChannel+0x254>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d12b      	bne.n	80028de <HAL_ADC_ConfigChannel+0x23a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_ADC_ConfigChannel+0x258>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x1f4>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b11      	cmp	r3, #17
 8002896:	d122      	bne.n	80028de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_ADC_ConfigChannel+0x258>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d111      	bne.n	80028de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_ADC_ConfigChannel+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a11      	ldr	r2, [pc, #68]	; (8002904 <HAL_ADC_ConfigChannel+0x260>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	0c9a      	lsrs	r2, r3, #18
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d0:	e002      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f9      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	40012300 	.word	0x40012300
 80028f8:	40012000 	.word	0x40012000
 80028fc:	10000012 	.word	0x10000012
 8002900:	20000804 	.word	0x20000804
 8002904:	431bde83 	.word	0x431bde83

08002908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002910:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <ADC_Init+0x1f0>)
 8002912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800293c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6859      	ldr	r1, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	021a      	lsls	r2, r3, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6899      	ldr	r1, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	4a58      	ldr	r2, [pc, #352]	; (8002afc <ADC_Init+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d022      	beq.n	80029e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6899      	ldr	r1, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	e00f      	b.n	8002a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0202 	bic.w	r2, r2, #2
 8002a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6899      	ldr	r1, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7e1b      	ldrb	r3, [r3, #24]
 8002a20:	005a      	lsls	r2, r3, #1
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	035a      	lsls	r2, r3, #13
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	e007      	b.n	8002a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	051a      	lsls	r2, r3, #20
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002abe:	025a      	lsls	r2, r3, #9
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	029a      	lsls	r2, r3, #10
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	40012300 	.word	0x40012300
 8002afc:	0f000001 	.word	0x0f000001

08002b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
 8002b7c:	4907      	ldr	r1, [pc, #28]	; (8002b9c <__NVIC_EnableIRQ+0x38>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff29 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff3e 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff8e 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5d 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff31 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa2 	bl	8002c5c <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e177      	b.n	8003030 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 8166 	bne.w	800302a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80c0 	beq.w	800302a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b66      	ldr	r3, [pc, #408]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a65      	ldr	r2, [pc, #404]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b63      	ldr	r3, [pc, #396]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a61      	ldr	r2, [pc, #388]	; (800304c <HAL_GPIO_Init+0x328>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a58      	ldr	r2, [pc, #352]	; (8003050 <HAL_GPIO_Init+0x32c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d037      	beq.n	8002f62 <HAL_GPIO_Init+0x23e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a57      	ldr	r2, [pc, #348]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d031      	beq.n	8002f5e <HAL_GPIO_Init+0x23a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a56      	ldr	r2, [pc, #344]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d02b      	beq.n	8002f5a <HAL_GPIO_Init+0x236>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a55      	ldr	r2, [pc, #340]	; (800305c <HAL_GPIO_Init+0x338>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d025      	beq.n	8002f56 <HAL_GPIO_Init+0x232>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a54      	ldr	r2, [pc, #336]	; (8003060 <HAL_GPIO_Init+0x33c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d01f      	beq.n	8002f52 <HAL_GPIO_Init+0x22e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a53      	ldr	r2, [pc, #332]	; (8003064 <HAL_GPIO_Init+0x340>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d019      	beq.n	8002f4e <HAL_GPIO_Init+0x22a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_GPIO_Init+0x344>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_GPIO_Init+0x348>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00d      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_GPIO_Init+0x34c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d007      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4f      	ldr	r2, [pc, #316]	; (8003074 <HAL_GPIO_Init+0x350>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f3a:	2309      	movs	r3, #9
 8002f3c:	e012      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f3e:	230a      	movs	r3, #10
 8002f40:	e010      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f42:	2308      	movs	r3, #8
 8002f44:	e00e      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f46:	2307      	movs	r3, #7
 8002f48:	e00c      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f4a:	2306      	movs	r3, #6
 8002f4c:	e00a      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f4e:	2305      	movs	r3, #5
 8002f50:	e008      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f52:	2304      	movs	r3, #4
 8002f54:	e006      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f56:	2303      	movs	r3, #3
 8002f58:	e004      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e002      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x240>
 8002f62:	2300      	movs	r3, #0
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	f002 0203 	and.w	r2, r2, #3
 8002f6a:	0092      	lsls	r2, r2, #2
 8002f6c:	4093      	lsls	r3, r2
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f74:	4935      	ldr	r1, [pc, #212]	; (800304c <HAL_GPIO_Init+0x328>)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_GPIO_Init+0x354>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <HAL_GPIO_Init+0x354>)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_GPIO_Init+0x354>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd0:	4a29      	ldr	r2, [pc, #164]	; (8003078 <HAL_GPIO_Init+0x354>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd6:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_GPIO_Init+0x354>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffa:	4a1f      	ldr	r2, [pc, #124]	; (8003078 <HAL_GPIO_Init+0x354>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_GPIO_Init+0x354>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <HAL_GPIO_Init+0x354>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	3301      	adds	r3, #1
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b0f      	cmp	r3, #15
 8003034:	f67f ae84 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	40013800 	.word	0x40013800
 8003050:	40020000 	.word	0x40020000
 8003054:	40020400 	.word	0x40020400
 8003058:	40020800 	.word	0x40020800
 800305c:	40020c00 	.word	0x40020c00
 8003060:	40021000 	.word	0x40021000
 8003064:	40021400 	.word	0x40021400
 8003068:	40021800 	.word	0x40021800
 800306c:	40021c00 	.word	0x40021c00
 8003070:	40022000 	.word	0x40022000
 8003074:	40022400 	.word	0x40022400
 8003078:	40013c00 	.word	0x40013c00

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_PWREx_EnableOverDrive+0x90>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a1f      	ldr	r2, [pc, #124]	; (8003140 <HAL_PWREx_EnableOverDrive+0x90>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_PWREx_EnableOverDrive+0x90>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_PWREx_EnableOverDrive+0x94>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030dc:	f7ff f8d0 	bl	8002280 <HAL_GetTick>
 80030e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030e2:	e009      	b.n	80030f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030e4:	f7ff f8cc 	bl	8002280 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	d901      	bls.n	80030f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e01f      	b.n	8003138 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_PWREx_EnableOverDrive+0x98>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d1ee      	bne.n	80030e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800310c:	f7ff f8b8 	bl	8002280 <HAL_GetTick>
 8003110:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003112:	e009      	b.n	8003128 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003114:	f7ff f8b4 	bl	8002280 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003122:	d901      	bls.n	8003128 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e007      	b.n	8003138 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_PWREx_EnableOverDrive+0x98>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003134:	d1ee      	bne.n	8003114 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	420e0040 	.word	0x420e0040
 8003148:	40007000 	.word	0x40007000
 800314c:	420e0044 	.word	0x420e0044

08003150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e264      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d075      	beq.n	800325a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316e:	4ba3      	ldr	r3, [pc, #652]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d00c      	beq.n	8003194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4ba0      	ldr	r3, [pc, #640]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003182:	2b08      	cmp	r3, #8
 8003184:	d112      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b9d      	ldr	r3, [pc, #628]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003192:	d10b      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	4b99      	ldr	r3, [pc, #612]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05b      	beq.n	8003258 <HAL_RCC_OscConfig+0x108>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d157      	bne.n	8003258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e23f      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x74>
 80031b6:	4b91      	ldr	r3, [pc, #580]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a90      	ldr	r2, [pc, #576]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x98>
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a8a      	ldr	r2, [pc, #552]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a87      	ldr	r2, [pc, #540]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031e8:	4b84      	ldr	r3, [pc, #528]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a83      	ldr	r2, [pc, #524]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b81      	ldr	r3, [pc, #516]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a80      	ldr	r2, [pc, #512]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7ff f83a 	bl	8002280 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003210:	f7ff f836 	bl	8002280 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	; 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e204      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xc0>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7ff f826 	bl	8002280 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003238:	f7ff f822 	bl	8002280 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	; 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1f0      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0xe8>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b62      	ldr	r3, [pc, #392]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	4b5c      	ldr	r3, [pc, #368]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x152>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1c4      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4952      	ldr	r1, [pc, #328]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	e03a      	b.n	800332e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <HAL_RCC_OscConfig+0x2b0>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe ffdb 	bl	8002280 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe ffd7 	bl	8002280 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1a5      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	4b46      	ldr	r3, [pc, #280]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b43      	ldr	r3, [pc, #268]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4940      	ldr	r1, [pc, #256]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_RCC_OscConfig+0x2b0>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe ffba 	bl	8002280 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe ffb6 	bl	8002280 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e184      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d030      	beq.n	800339c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_OscConfig+0x2b4>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fe ff9a 	bl	8002280 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe ff96 	bl	8002280 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e164      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x200>
 800336e:	e015      	b.n	800339c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003370:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_OscConfig+0x2b4>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe ff83 	bl	8002280 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337e:	f7fe ff7f 	bl	8002280 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e14d      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1f0      	bne.n	800337e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a0 	beq.w	80034ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a0e      	ldr	r2, [pc, #56]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x2b8>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d121      	bne.n	800342a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <HAL_RCC_OscConfig+0x2b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a07      	ldr	r2, [pc, #28]	; (8003408 <HAL_RCC_OscConfig+0x2b8>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe ff45 	bl	8002280 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e011      	b.n	800341e <HAL_RCC_OscConfig+0x2ce>
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
 8003408:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340c:	f7fe ff38 	bl	8002280 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e106      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <HAL_RCC_OscConfig+0x4e4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x2f0>
 8003432:	4b81      	ldr	r3, [pc, #516]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a80      	ldr	r2, [pc, #512]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x32a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x312>
 8003448:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	4a7a      	ldr	r2, [pc, #488]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6713      	str	r3, [r2, #112]	; 0x70
 8003454:	4b78      	ldr	r3, [pc, #480]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	4a77      	ldr	r2, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	; 0x70
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x32a>
 8003462:	4b75      	ldr	r3, [pc, #468]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a74      	ldr	r2, [pc, #464]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	4b72      	ldr	r3, [pc, #456]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003472:	4a71      	ldr	r2, [pc, #452]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fe fefd 	bl	8002280 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fef9 	bl	8002280 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0c5      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b65      	ldr	r3, [pc, #404]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x33a>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fee7 	bl	8002280 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fee3 	bl	8002280 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0af      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b5a      	ldr	r3, [pc, #360]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b56      	ldr	r3, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a55      	ldr	r2, [pc, #340]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 809b 	beq.w	800362a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d05c      	beq.n	80035ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d141      	bne.n	800358c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b4c      	ldr	r3, [pc, #304]	; (800363c <HAL_RCC_OscConfig+0x4ec>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe feb7 	bl	8002280 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe feb3 	bl	8002280 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e081      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003528:	4b43      	ldr	r3, [pc, #268]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	019b      	lsls	r3, r3, #6
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	041b      	lsls	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	4937      	ldr	r1, [pc, #220]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355e:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_RCC_OscConfig+0x4ec>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fe8c 	bl	8002280 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356c:	f7fe fe88 	bl	8002280 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e056      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357e:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x41c>
 800358a:	e04e      	b.n	800362a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <HAL_RCC_OscConfig+0x4ec>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003592:	f7fe fe75 	bl	8002280 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800359a:	f7fe fe71 	bl	8002280 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e03f      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ac:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x44a>
 80035b8:	e037      	b.n	800362a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e032      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_RCC_OscConfig+0x4e8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d028      	beq.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d121      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d11a      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035fe:	4293      	cmp	r3, r2
 8003600:	d111      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	3b01      	subs	r3, #1
 8003610:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40007000 	.word	0x40007000
 8003638:	40023800 	.word	0x40023800
 800363c:	42470060 	.word	0x42470060

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0cc      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b68      	ldr	r3, [pc, #416]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d90c      	bls.n	800367c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b65      	ldr	r3, [pc, #404]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800369e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d044      	beq.n	8003760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d119      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e067      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4934      	ldr	r1, [pc, #208]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fe fda6 	bl	8002280 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fe fda2 	bl	8002280 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e04f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d20c      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490a      	ldr	r1, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fd06 	bl	80021f8 <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023c00 	.word	0x40023c00
 80037fc:	40023800 	.word	0x40023800
 8003800:	080057b0 	.word	0x080057b0
 8003804:	20000804 	.word	0x20000804
 8003808:	20000808 	.word	0x20000808

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	b5b0      	push	{r4, r5, r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003812:	2100      	movs	r1, #0
 8003814:	6079      	str	r1, [r7, #4]
 8003816:	2100      	movs	r1, #0
 8003818:	60f9      	str	r1, [r7, #12]
 800381a:	2100      	movs	r1, #0
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800381e:	2100      	movs	r1, #0
 8003820:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003822:	4952      	ldr	r1, [pc, #328]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003824:	6889      	ldr	r1, [r1, #8]
 8003826:	f001 010c 	and.w	r1, r1, #12
 800382a:	2908      	cmp	r1, #8
 800382c:	d00d      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0x3e>
 800382e:	2908      	cmp	r1, #8
 8003830:	f200 8094 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x150>
 8003834:	2900      	cmp	r1, #0
 8003836:	d002      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x32>
 8003838:	2904      	cmp	r1, #4
 800383a:	d003      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x38>
 800383c:	e08e      	b.n	800395c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800383e:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCC_GetSysClockFreq+0x164>)
 8003840:	60bb      	str	r3, [r7, #8]
       break;
 8003842:	e08e      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003844:	4b4b      	ldr	r3, [pc, #300]	; (8003974 <HAL_RCC_GetSysClockFreq+0x168>)
 8003846:	60bb      	str	r3, [r7, #8]
      break;
 8003848:	e08b      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800384a:	4948      	ldr	r1, [pc, #288]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 800384c:	6849      	ldr	r1, [r1, #4]
 800384e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003852:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003854:	4945      	ldr	r1, [pc, #276]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003856:	6849      	ldr	r1, [r1, #4]
 8003858:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800385c:	2900      	cmp	r1, #0
 800385e:	d024      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4942      	ldr	r1, [pc, #264]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003862:	6849      	ldr	r1, [r1, #4]
 8003864:	0989      	lsrs	r1, r1, #6
 8003866:	4608      	mov	r0, r1
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003870:	f04f 0500 	mov.w	r5, #0
 8003874:	ea00 0204 	and.w	r2, r0, r4
 8003878:	ea01 0305 	and.w	r3, r1, r5
 800387c:	493d      	ldr	r1, [pc, #244]	; (8003974 <HAL_RCC_GetSysClockFreq+0x168>)
 800387e:	fb01 f003 	mul.w	r0, r1, r3
 8003882:	2100      	movs	r1, #0
 8003884:	fb01 f102 	mul.w	r1, r1, r2
 8003888:	1844      	adds	r4, r0, r1
 800388a:	493a      	ldr	r1, [pc, #232]	; (8003974 <HAL_RCC_GetSysClockFreq+0x168>)
 800388c:	fba2 0101 	umull	r0, r1, r2, r1
 8003890:	1863      	adds	r3, r4, r1
 8003892:	4619      	mov	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	461a      	mov	r2, r3
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	f7fc fca6 	bl	80001ec <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e04a      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	461a      	mov	r2, r3
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	ea02 0400 	and.w	r4, r2, r0
 80038c2:	ea03 0501 	and.w	r5, r3, r1
 80038c6:	4620      	mov	r0, r4
 80038c8:	4629      	mov	r1, r5
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	014b      	lsls	r3, r1, #5
 80038d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038d8:	0142      	lsls	r2, r0, #5
 80038da:	4610      	mov	r0, r2
 80038dc:	4619      	mov	r1, r3
 80038de:	1b00      	subs	r0, r0, r4
 80038e0:	eb61 0105 	sbc.w	r1, r1, r5
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	018b      	lsls	r3, r1, #6
 80038ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038f2:	0182      	lsls	r2, r0, #6
 80038f4:	1a12      	subs	r2, r2, r0
 80038f6:	eb63 0301 	sbc.w	r3, r3, r1
 80038fa:	f04f 0000 	mov.w	r0, #0
 80038fe:	f04f 0100 	mov.w	r1, #0
 8003902:	00d9      	lsls	r1, r3, #3
 8003904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003908:	00d0      	lsls	r0, r2, #3
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	1912      	adds	r2, r2, r4
 8003910:	eb45 0303 	adc.w	r3, r5, r3
 8003914:	f04f 0000 	mov.w	r0, #0
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	0299      	lsls	r1, r3, #10
 800391e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003922:	0290      	lsls	r0, r2, #10
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	461a      	mov	r2, r3
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	f7fc fc5a 	bl	80001ec <__aeabi_uldivmod>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	4613      	mov	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	60bb      	str	r3, [r7, #8]
      break;
 800395a:	e002      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <HAL_RCC_GetSysClockFreq+0x164>)
 800395e:	60bb      	str	r3, [r7, #8]
      break;
 8003960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003962:	68bb      	ldr	r3, [r7, #8]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bdb0      	pop	{r4, r5, r7, pc}
 800396c:	40023800 	.word	0x40023800
 8003970:	00f42400 	.word	0x00f42400
 8003974:	017d7840 	.word	0x017d7840

08003978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07b      	b.n	8003a82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b00      	cmp	r3, #0
 8003990:	d108      	bne.n	80039a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399a:	d009      	beq.n	80039b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	61da      	str	r2, [r3, #28]
 80039a2:	e005      	b.n	80039b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fe f9b2 	bl	8001d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	ea42 0103 	orr.w	r1, r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f003 0104 	and.w	r1, r3, #4
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0210 	and.w	r2, r3, #16
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b088      	sub	sp, #32
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	60f8      	str	r0, [r7, #12]
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_SPI_Transmit+0x22>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e126      	b.n	8003cfa <HAL_SPI_Transmit+0x270>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab4:	f7fe fbe4 	bl	8002280 <HAL_GetTick>
 8003ab8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ace:	e10b      	b.n	8003ce8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Transmit+0x52>
 8003ad6:	88fb      	ldrh	r3, [r7, #6]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ae0:	e102      	b.n	8003ce8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b28:	d10f      	bne.n	8003b4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d007      	beq.n	8003b68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b70:	d14b      	bne.n	8003c0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_SPI_Transmit+0xf6>
 8003b7a:	8afb      	ldrh	r3, [r7, #22]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d13e      	bne.n	8003bfe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	881a      	ldrh	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ba4:	e02b      	b.n	8003bfe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d112      	bne.n	8003bda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	881a      	ldrh	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bd8:	e011      	b.n	8003bfe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bda:	f7fe fb51 	bl	8002280 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d803      	bhi.n	8003bf2 <HAL_SPI_Transmit+0x168>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d102      	bne.n	8003bf8 <HAL_SPI_Transmit+0x16e>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bfc:	e074      	b.n	8003ce8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1ce      	bne.n	8003ba6 <HAL_SPI_Transmit+0x11c>
 8003c08:	e04c      	b.n	8003ca4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_SPI_Transmit+0x18e>
 8003c12:	8afb      	ldrh	r3, [r7, #22]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d140      	bne.n	8003c9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	7812      	ldrb	r2, [r2, #0]
 8003c24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c3e:	e02c      	b.n	8003c9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d113      	bne.n	8003c76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	7812      	ldrb	r2, [r2, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c74:	e011      	b.n	8003c9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c76:	f7fe fb03 	bl	8002280 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d803      	bhi.n	8003c8e <HAL_SPI_Transmit+0x204>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d102      	bne.n	8003c94 <HAL_SPI_Transmit+0x20a>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c98:	e026      	b.n	8003ce8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1cd      	bne.n	8003c40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	6839      	ldr	r1, [r7, #0]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f8b3 	bl	8003e14 <SPI_EndRxTxTransaction>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e000      	b.n	8003ce8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ce6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d14:	f7fe fab4 	bl	8002280 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4413      	add	r3, r2
 8003d22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d24:	f7fe faac 	bl	8002280 <HAL_GetTick>
 8003d28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d2a:	4b39      	ldr	r3, [pc, #228]	; (8003e10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	015b      	lsls	r3, r3, #5
 8003d30:	0d1b      	lsrs	r3, r3, #20
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	fb02 f303 	mul.w	r3, r2, r3
 8003d38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d3a:	e054      	b.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d050      	beq.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d44:	f7fe fa9c 	bl	8002280 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d902      	bls.n	8003d5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d13d      	bne.n	8003dd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d72:	d111      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7c:	d004      	beq.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d86:	d107      	bne.n	8003d98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da0:	d10f      	bne.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e017      	b.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d19b      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	20000804 	.word	0x20000804

08003e14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <SPI_EndRxTxTransaction+0x7c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <SPI_EndRxTxTransaction+0x80>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	0d5b      	lsrs	r3, r3, #21
 8003e2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e3e:	d112      	bne.n	8003e66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f7ff ff5a 	bl	8003d04 <SPI_WaitFlagStateUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0220 	orr.w	r2, r3, #32
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e00f      	b.n	8003e86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7c:	2b80      	cmp	r3, #128	; 0x80
 8003e7e:	d0f2      	beq.n	8003e66 <SPI_EndRxTxTransaction+0x52>
 8003e80:	e000      	b.n	8003e84 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e82:	bf00      	nop
  }

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000804 	.word	0x20000804
 8003e94:	165e9f81 	.word	0x165e9f81

08003e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e041      	b.n	8003f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fe f8b2 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f000 fa2e 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d122      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d11b      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0202 	mvn.w	r2, #2
 8003f62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0303 	and.w	r3, r3, #3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f9bf 	bl	80042fc <HAL_TIM_IC_CaptureCallback>
 8003f7e:	e005      	b.n	8003f8c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9b1 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9c2 	bl	8004310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d122      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d11b      	bne.n	8003fe6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f06f 0204 	mvn.w	r2, #4
 8003fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 f995 	bl	80042fc <HAL_TIM_IC_CaptureCallback>
 8003fd2:	e005      	b.n	8003fe0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f987 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f998 	bl	8004310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d122      	bne.n	800403a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d11b      	bne.n	800403a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0208 	mvn.w	r2, #8
 800400a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2204      	movs	r2, #4
 8004010:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f96b 	bl	80042fc <HAL_TIM_IC_CaptureCallback>
 8004026:	e005      	b.n	8004034 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f95d 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f96e 	bl	8004310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b10      	cmp	r3, #16
 8004046:	d122      	bne.n	800408e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d11b      	bne.n	800408e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f06f 0210 	mvn.w	r2, #16
 800405e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2208      	movs	r2, #8
 8004064:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f941 	bl	80042fc <HAL_TIM_IC_CaptureCallback>
 800407a:	e005      	b.n	8004088 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f933 	bl	80042e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f944 	bl	8004310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0201 	mvn.w	r2, #1
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f90d 	bl	80042d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	2b80      	cmp	r3, #128	; 0x80
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fae9 	bl	80046b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f909 	bl	8004324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b20      	cmp	r3, #32
 800411e:	d10e      	bne.n	800413e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d107      	bne.n	800413e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0220 	mvn.w	r2, #32
 8004136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fab3 	bl	80046a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415a:	2b01      	cmp	r3, #1
 800415c:	d101      	bne.n	8004162 <HAL_TIM_ConfigClockSource+0x1c>
 800415e:	2302      	movs	r3, #2
 8004160:	e0b4      	b.n	80042cc <HAL_TIM_ConfigClockSource+0x186>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004180:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004188:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419a:	d03e      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xd4>
 800419c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a0:	f200 8087 	bhi.w	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	f000 8086 	beq.w	80042b8 <HAL_TIM_ConfigClockSource+0x172>
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d87f      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041b2:	2b70      	cmp	r3, #112	; 0x70
 80041b4:	d01a      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xa6>
 80041b6:	2b70      	cmp	r3, #112	; 0x70
 80041b8:	d87b      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041ba:	2b60      	cmp	r3, #96	; 0x60
 80041bc:	d050      	beq.n	8004260 <HAL_TIM_ConfigClockSource+0x11a>
 80041be:	2b60      	cmp	r3, #96	; 0x60
 80041c0:	d877      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041c2:	2b50      	cmp	r3, #80	; 0x50
 80041c4:	d03c      	beq.n	8004240 <HAL_TIM_ConfigClockSource+0xfa>
 80041c6:	2b50      	cmp	r3, #80	; 0x50
 80041c8:	d873      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d058      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x13a>
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d86f      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041d2:	2b30      	cmp	r3, #48	; 0x30
 80041d4:	d064      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0x15a>
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	d86b      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d060      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0x15a>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d867      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d05c      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0x15a>
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d05a      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0x15a>
 80041ea:	e062      	b.n	80042b2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f000 f9b6 	bl	800456c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800420e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
      break;
 8004218:	e04f      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6899      	ldr	r1, [r3, #8]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f000 f99f 	bl	800456c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423c:	609a      	str	r2, [r3, #8]
      break;
 800423e:	e03c      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6818      	ldr	r0, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	461a      	mov	r2, r3
 800424e:	f000 f913 	bl	8004478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2150      	movs	r1, #80	; 0x50
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f96c 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 800425e:	e02c      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	6859      	ldr	r1, [r3, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	461a      	mov	r2, r3
 800426e:	f000 f932 	bl	80044d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2160      	movs	r1, #96	; 0x60
 8004278:	4618      	mov	r0, r3
 800427a:	f000 f95c 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 800427e:	e01c      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6859      	ldr	r1, [r3, #4]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	461a      	mov	r2, r3
 800428e:	f000 f8f3 	bl	8004478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2140      	movs	r1, #64	; 0x40
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f94c 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 800429e:	e00c      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 f943 	bl	8004536 <TIM_ITRx_SetConfig>
      break;
 80042b0:	e003      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      break;
 80042b6:	e000      	b.n	80042ba <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <TIM_Base_SetConfig+0x114>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d00f      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <TIM_Base_SetConfig+0x118>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <TIM_Base_SetConfig+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3b      	ldr	r2, [pc, #236]	; (8004458 <TIM_Base_SetConfig+0x120>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3a      	ldr	r2, [pc, #232]	; (800445c <TIM_Base_SetConfig+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d108      	bne.n	800438a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2f      	ldr	r2, [pc, #188]	; (800444c <TIM_Base_SetConfig+0x114>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d02b      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d027      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <TIM_Base_SetConfig+0x118>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d023      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <TIM_Base_SetConfig+0x11c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d01f      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <TIM_Base_SetConfig+0x120>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d01b      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a29      	ldr	r2, [pc, #164]	; (800445c <TIM_Base_SetConfig+0x124>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d017      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a28      	ldr	r2, [pc, #160]	; (8004460 <TIM_Base_SetConfig+0x128>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a27      	ldr	r2, [pc, #156]	; (8004464 <TIM_Base_SetConfig+0x12c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00f      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a26      	ldr	r2, [pc, #152]	; (8004468 <TIM_Base_SetConfig+0x130>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00b      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a25      	ldr	r2, [pc, #148]	; (800446c <TIM_Base_SetConfig+0x134>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a24      	ldr	r2, [pc, #144]	; (8004470 <TIM_Base_SetConfig+0x138>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a23      	ldr	r2, [pc, #140]	; (8004474 <TIM_Base_SetConfig+0x13c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d108      	bne.n	80043fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <TIM_Base_SetConfig+0x114>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_Base_SetConfig+0xf8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a0c      	ldr	r2, [pc, #48]	; (800445c <TIM_Base_SetConfig+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	615a      	str	r2, [r3, #20]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40010000 	.word	0x40010000
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40010400 	.word	0x40010400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800
 800446c:	40001800 	.word	0x40001800
 8004470:	40001c00 	.word	0x40001c00
 8004474:	40002000 	.word	0x40002000

08004478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	f023 0201 	bic.w	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f023 030a 	bic.w	r3, r3, #10
 80044b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b087      	sub	sp, #28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	f023 0210 	bic.w	r2, r3, #16
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	031b      	lsls	r3, r3, #12
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4313      	orrs	r3, r2
 8004554:	f043 0307 	orr.w	r3, r3, #7
 8004558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	609a      	str	r2, [r3, #8]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	021a      	lsls	r2, r3, #8
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	431a      	orrs	r2, r3
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4313      	orrs	r3, r2
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	609a      	str	r2, [r3, #8]
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e05a      	b.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a21      	ldr	r2, [pc, #132]	; (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d022      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004610:	d01d      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d018      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10c      	bne.n	8004668 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4313      	orrs	r3, r2
 800465e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40010000 	.word	0x40010000
 800468c:	40000400 	.word	0x40000400
 8004690:	40000800 	.word	0x40000800
 8004694:	40000c00 	.word	0x40000c00
 8004698:	40010400 	.word	0x40010400
 800469c:	40014000 	.word	0x40014000
 80046a0:	40001800 	.word	0x40001800

080046a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4d0d      	ldr	r5, [pc, #52]	; (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	; (8004708 <__libc_init_array+0x3c>)
 80046d2:	1b64      	subs	r4, r4, r5
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2600      	movs	r6, #0
 80046d8:	42a6      	cmp	r6, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4d0b      	ldr	r5, [pc, #44]	; (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	; (8004710 <__libc_init_array+0x44>)
 80046e0:	f000 f82e 	bl	8004740 <_init>
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2600      	movs	r6, #0
 80046ea:	42a6      	cmp	r6, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f4:	4798      	blx	r3
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fe:	4798      	blx	r3
 8004700:	3601      	adds	r6, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	080057c8 	.word	0x080057c8
 8004708:	080057c8 	.word	0x080057c8
 800470c:	080057c8 	.word	0x080057c8
 8004710:	080057cc 	.word	0x080057cc

08004714 <memcpy>:
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	f100 33ff 	add.w	r3, r0, #4294967295
 800471c:	d100      	bne.n	8004720 <memcpy+0xc>
 800471e:	4770      	bx	lr
 8004720:	b510      	push	{r4, lr}
 8004722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472a:	4291      	cmp	r1, r2
 800472c:	d1f9      	bne.n	8004722 <memcpy+0xe>
 800472e:	bd10      	pop	{r4, pc}

08004730 <memset>:
 8004730:	4402      	add	r2, r0
 8004732:	4603      	mov	r3, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_init>:
 8004740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004742:	bf00      	nop
 8004744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004746:	bc08      	pop	{r3}
 8004748:	469e      	mov	lr, r3
 800474a:	4770      	bx	lr

0800474c <_fini>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr
